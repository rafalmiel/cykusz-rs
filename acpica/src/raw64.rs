/* automatically generated by rust-bindgen */

pub type va_list = __builtin_va_list;
pub type __uint64_t = u32;
pub type BOOLEAN = bool;
pub type UINT8 = u8;
pub type UINT16 = i16;
pub type UINT64 = i64;
pub type UINT32 = i32;
pub type ACPI_SIZE = UINT64;
pub type ACPI_IO_ADDRESS = UINT64;
pub type ACPI_PHYSICAL_ADDRESS = UINT64;
pub type ACPI_STATUS = UINT32;
pub type ACPI_NAME = UINT32;
pub type ACPI_STRING = *mut i8;
pub type ACPI_HANDLE = *mut ::core::ffi::c_void;
pub type ACPI_OWNER_ID = UINT16;
pub type ACPI_OBJECT_TYPE = UINT32;
pub type ACPI_EVENT_STATUS = UINT32;
pub type ACPI_ADR_SPACE_TYPE = UINT8;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_object {
    pub Type: ACPI_OBJECT_TYPE,
    pub Integer: acpi_object__bindgen_ty_1,
    pub String: acpi_object__bindgen_ty_2,
    pub Buffer: acpi_object__bindgen_ty_3,
    pub Package: acpi_object__bindgen_ty_4,
    pub Reference: acpi_object__bindgen_ty_5,
    pub Processor: acpi_object__bindgen_ty_6,
    pub PowerResource: acpi_object__bindgen_ty_7,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_1 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Value: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_2 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_3 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut UINT8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_4 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Count: UINT32,
    pub Elements: *mut acpi_object,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_5 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ActualType: ACPI_OBJECT_TYPE,
    pub Handle: ACPI_HANDLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_6 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ProcId: UINT32,
    pub PblkAddress: ACPI_IO_ADDRESS,
    pub PblkLength: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_7 {
    pub Type: ACPI_OBJECT_TYPE,
    pub SystemLevel: UINT32,
    pub ResourceOrder: UINT32,
}
pub type ACPI_OBJECT = acpi_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object_list {
    pub Count: UINT32,
    pub Pointer: *mut ACPI_OBJECT,
}
pub type ACPI_OBJECT_LIST = acpi_object_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_buffer {
    pub Length: ACPI_SIZE,
    pub Pointer: *mut ::core::ffi::c_void,
}
pub type ACPI_BUFFER = acpi_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_predefined_names {
    pub Name: *const i8,
    pub Type: UINT8,
    pub Val: *mut i8,
}
pub type ACPI_PREDEFINED_NAMES = acpi_predefined_names;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_statistics {
    pub SciCount: UINT32,
    pub GpeCount: UINT32,
    pub FixedEventCount: [UINT32; 5usize],
    pub MethodCount: UINT32,
}
pub type ACPI_STATISTICS = acpi_statistics;
pub type ACPI_OSD_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_OSD_EXEC_CALLBACK =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void)>;
pub type ACPI_SCI_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GBL_EVENT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        EventType: UINT32,
        Device: ACPI_HANDLE,
        EventNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ),
>;
pub type ACPI_EVENT_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GPE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> UINT32,
>;
pub type ACPI_NOTIFY_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Device: ACPI_HANDLE, Value: UINT32, Context: *mut ::core::ffi::c_void),
>;
pub type ACPI_OBJECT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Data: *mut ::core::ffi::c_void),
>;
pub type ACPI_INIT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Function: UINT32) -> ACPI_STATUS,
>;
pub type ACPI_EXCEPTION_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        AmlStatus: ACPI_STATUS,
        Name: ACPI_NAME,
        Opcode: UINT16,
        AmlOffset: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_TABLE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Event: UINT32,
        Table: *mut ::core::ffi::c_void,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_ADR_SPACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Function: UINT32,
        Address: ACPI_PHYSICAL_ADDRESS,
        BitWidth: UINT32,
        Value: *mut UINT64,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_ADR_SPACE_SETUP = ::core::option::Option<
    unsafe extern "C" fn(
        RegionHandle: ACPI_HANDLE,
        Function: UINT32,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_WALK_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Object: ACPI_HANDLE,
        NestingLevel: UINT32,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_INTERFACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(InterfaceName: ACPI_STRING, Supported: UINT32) -> UINT32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pnp_device_id {
    pub Length: UINT32,
    pub String: *mut i8,
}
pub type ACPI_PNP_DEVICE_ID = acpi_pnp_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pnp_device_id_list {
    pub Count: UINT32,
    pub ListSize: UINT32,
    pub Ids: [ACPI_PNP_DEVICE_ID; 1usize],
}
pub type ACPI_PNP_DEVICE_ID_LIST = acpi_pnp_device_id_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_device_info {
    pub InfoSize: UINT32,
    pub Name: UINT32,
    pub Type: ACPI_OBJECT_TYPE,
    pub ParamCount: UINT8,
    pub Valid: UINT16,
    pub Flags: UINT8,
    pub HighestDstates: [UINT8; 4usize],
    pub LowestDstates: [UINT8; 5usize],
    pub Address: UINT64,
    pub HardwareId: ACPI_PNP_DEVICE_ID,
    pub UniqueId: ACPI_PNP_DEVICE_ID,
    pub ClassCode: ACPI_PNP_DEVICE_ID,
    pub CompatibleIdList: ACPI_PNP_DEVICE_ID_LIST,
}
pub type ACPI_DEVICE_INFO = acpi_device_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pci_id {
    pub Segment: UINT16,
    pub Bus: UINT16,
    pub Device: UINT16,
    pub Function: UINT16,
}
pub type ACPI_PCI_ID = acpi_pci_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_list {
    pub ListName: *const i8,
    pub ListHead: *mut ::core::ffi::c_void,
    pub ObjectSize: UINT16,
    pub MaxDepth: UINT16,
    pub CurrentDepth: UINT16,
}
pub type ACPI_MEMORY_LIST = acpi_memory_list;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_METHOD: ACPI_TRACE_EVENT_TYPE = 0;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_OPCODE: ACPI_TRACE_EVENT_TYPE = 1;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_REGION: ACPI_TRACE_EVENT_TYPE = 2;
pub type ACPI_TRACE_EVENT_TYPE = u32;
#[doc = " Master ACPI Table Header. This common header is used by all ACPI tables"]
#[doc = " except the RSDP and FACS."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_header {
    pub Signature: [i8; 4usize],
    pub Length: UINT32,
    pub Revision: UINT8,
    pub Checksum: UINT8,
    pub OemId: [i8; 6usize],
    pub OemTableId: [i8; 8usize],
    pub OemRevision: UINT32,
    pub AslCompilerId: [i8; 4usize],
    pub AslCompilerRevision: UINT32,
}
pub type ACPI_TABLE_HEADER = acpi_table_header;
#[doc = " GAS - Generic Address Structure (ACPI 2.0+)"]
#[doc = ""]
#[doc = " Note: Since this structure is used in the ACPI tables, it is byte aligned."]
#[doc = " If misaligned access is not supported by the hardware, accesses to the"]
#[doc = " 64-bit Address field must be performed with care."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_generic_address {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessWidth: UINT8,
    pub Address: UINT64,
}
pub type ACPI_GENERIC_ADDRESS = acpi_generic_address;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_name_union {
    pub Integer: UINT32,
    pub Ascii: [i8; 4usize],
    _bindgen_union_align: u32,
}
pub type ACPI_NAME_UNION = acpi_name_union;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_table_desc {
    pub Address: ACPI_PHYSICAL_ADDRESS,
    pub Pointer: *mut ACPI_TABLE_HEADER,
    pub Length: UINT32,
    pub Signature: ACPI_NAME_UNION,
    pub OwnerId: ACPI_OWNER_ID,
    pub Flags: UINT8,
    pub ValidationCount: UINT16,
}
pub type ACPI_TABLE_DESC = acpi_table_desc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_vendor_uuid {
    pub Subtype: UINT8,
    pub Data: [UINT8; 16usize],
}
pub type ACPI_VENDOR_UUID = acpi_vendor_uuid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_irq {
    pub DescriptorLength: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub Interrupts: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_IRQ = acpi_resource_irq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_dma {
    pub Type: UINT8,
    pub BusMaster: UINT8,
    pub Transfer: UINT8,
    pub ChannelCount: UINT8,
    pub Channels: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_DMA = acpi_resource_dma;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_start_dependent {
    pub DescriptorLength: UINT8,
    pub CompatibilityPriority: UINT8,
    pub PerformanceRobustness: UINT8,
}
pub type ACPI_RESOURCE_START_DEPENDENT = acpi_resource_start_dependent;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_io {
    pub IoDecode: UINT8,
    pub Alignment: UINT8,
    pub AddressLength: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
}
pub type ACPI_RESOURCE_IO = acpi_resource_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_io {
    pub Address: UINT16,
    pub AddressLength: UINT8,
}
pub type ACPI_RESOURCE_FIXED_IO = acpi_resource_fixed_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_dma {
    pub RequestLines: UINT16,
    pub Channels: UINT16,
    pub Width: UINT8,
}
pub type ACPI_RESOURCE_FIXED_DMA = acpi_resource_fixed_dma;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_vendor {
    pub ByteLength: UINT16,
    pub ByteData: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_VENDOR = acpi_resource_vendor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_vendor_typed {
    pub ByteLength: UINT16,
    pub UuidSubtype: UINT8,
    pub Uuid: [UINT8; 16usize],
    pub ByteData: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_VENDOR_TYPED = acpi_resource_vendor_typed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_end_tag {
    pub Checksum: UINT8,
}
pub type ACPI_RESOURCE_END_TAG = acpi_resource_end_tag;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory24 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub Alignment: UINT16,
    pub AddressLength: UINT16,
}
pub type ACPI_RESOURCE_MEMORY24 = acpi_resource_memory24;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory32 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub Alignment: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_RESOURCE_MEMORY32 = acpi_resource_memory32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_memory32 {
    pub WriteProtect: UINT8,
    pub Address: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_RESOURCE_FIXED_MEMORY32 = acpi_resource_fixed_memory32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_attribute {
    pub WriteProtect: UINT8,
    pub Caching: UINT8,
    pub RangeType: UINT8,
    pub Translation: UINT8,
}
pub type ACPI_MEMORY_ATTRIBUTE = acpi_memory_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_io_attribute {
    pub RangeType: UINT8,
    pub Translation: UINT8,
    pub TranslationType: UINT8,
    pub Reserved1: UINT8,
}
pub type ACPI_IO_ATTRIBUTE = acpi_io_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_resource_attribute {
    pub Mem: ACPI_MEMORY_ATTRIBUTE,
    pub Io: ACPI_IO_ATTRIBUTE,
    pub TypeSpecific: UINT8,
    _bindgen_union_align: [u8; 4usize],
}
pub type ACPI_RESOURCE_ATTRIBUTE = acpi_resource_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_label {
    pub StringLength: UINT16,
    pub StringPtr: *mut i8,
}
pub type ACPI_RESOURCE_LABEL = acpi_resource_label;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_source {
    pub Index: UINT8,
    pub StringLength: UINT16,
    pub StringPtr: *mut i8,
}
pub type ACPI_RESOURCE_SOURCE = acpi_resource_source;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address16_attribute {
    pub Granularity: UINT16,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub TranslationOffset: UINT16,
    pub AddressLength: UINT16,
}
pub type ACPI_ADDRESS16_ATTRIBUTE = acpi_address16_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address32_attribute {
    pub Granularity: UINT32,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub TranslationOffset: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_ADDRESS32_ATTRIBUTE = acpi_address32_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address64_attribute {
    pub Granularity: UINT64,
    pub Minimum: UINT64,
    pub Maximum: UINT64,
    pub TranslationOffset: UINT64,
    pub AddressLength: UINT64,
}
pub type ACPI_ADDRESS64_ATTRIBUTE = acpi_address64_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
}
pub type ACPI_RESOURCE_ADDRESS = acpi_resource_address;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address16 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS16_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS16 = acpi_resource_address16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address32 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS32_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS32 = acpi_resource_address32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS64 = acpi_resource_address64;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_resource_extended_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub RevisionID: UINT8,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub TypeSpecific: UINT64,
}
pub type ACPI_RESOURCE_EXTENDED_ADDRESS64 = acpi_resource_extended_address64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_extended_irq {
    pub ProducerConsumer: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub Interrupts: [UINT32; 1usize],
}
pub type ACPI_RESOURCE_EXTENDED_IRQ = acpi_resource_extended_irq;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_generic_register {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessSize: UINT8,
    pub Address: UINT64,
}
pub type ACPI_RESOURCE_GENERIC_REGISTER = acpi_resource_generic_register;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_gpio {
    pub RevisionId: UINT8,
    pub ConnectionType: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub IoRestriction: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub DriveStrength: UINT16,
    pub DebounceTimeout: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_GPIO = acpi_resource_gpio;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_common_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_COMMON_SERIALBUS = acpi_resource_common_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_i2c_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub AccessMode: UINT8,
    pub SlaveAddress: UINT16,
    pub ConnectionSpeed: UINT32,
}
pub type ACPI_RESOURCE_I2C_SERIALBUS = acpi_resource_i2c_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_spi_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub WireMode: UINT8,
    pub DevicePolarity: UINT8,
    pub DataBitLength: UINT8,
    pub ClockPhase: UINT8,
    pub ClockPolarity: UINT8,
    pub DeviceSelection: UINT16,
    pub ConnectionSpeed: UINT32,
}
pub type ACPI_RESOURCE_SPI_SERIALBUS = acpi_resource_spi_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_uart_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub Endian: UINT8,
    pub DataBits: UINT8,
    pub StopBits: UINT8,
    pub FlowControl: UINT8,
    pub Parity: UINT8,
    pub LinesEnabled: UINT8,
    pub RxFifoSize: UINT16,
    pub TxFifoSize: UINT16,
    pub DefaultBaudRate: UINT32,
}
pub type ACPI_RESOURCE_UART_SERIALBUS = acpi_resource_uart_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_function {
    pub RevisionId: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_FUNCTION = acpi_resource_pin_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_CONFIG = acpi_resource_pin_config;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub PinTable: *mut UINT16,
    pub ResourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP = acpi_resource_pin_group;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_function {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP_FUNCTION = acpi_resource_pin_group_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP_CONFIG = acpi_resource_pin_group_config;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_resource_data {
    pub Irq: ACPI_RESOURCE_IRQ,
    pub Dma: ACPI_RESOURCE_DMA,
    pub StartDpf: ACPI_RESOURCE_START_DEPENDENT,
    pub Io: ACPI_RESOURCE_IO,
    pub FixedIo: ACPI_RESOURCE_FIXED_IO,
    pub FixedDma: ACPI_RESOURCE_FIXED_DMA,
    pub Vendor: ACPI_RESOURCE_VENDOR,
    pub VendorTyped: ACPI_RESOURCE_VENDOR_TYPED,
    pub EndTag: ACPI_RESOURCE_END_TAG,
    pub Memory24: ACPI_RESOURCE_MEMORY24,
    pub Memory32: ACPI_RESOURCE_MEMORY32,
    pub FixedMemory32: ACPI_RESOURCE_FIXED_MEMORY32,
    pub Address16: ACPI_RESOURCE_ADDRESS16,
    pub Address32: ACPI_RESOURCE_ADDRESS32,
    pub Address64: ACPI_RESOURCE_ADDRESS64,
    pub ExtAddress64: ACPI_RESOURCE_EXTENDED_ADDRESS64,
    pub ExtendedIrq: ACPI_RESOURCE_EXTENDED_IRQ,
    pub GenericReg: ACPI_RESOURCE_GENERIC_REGISTER,
    pub Gpio: ACPI_RESOURCE_GPIO,
    pub I2cSerialBus: ACPI_RESOURCE_I2C_SERIALBUS,
    pub SpiSerialBus: ACPI_RESOURCE_SPI_SERIALBUS,
    pub UartSerialBus: ACPI_RESOURCE_UART_SERIALBUS,
    pub CommonSerialBus: ACPI_RESOURCE_COMMON_SERIALBUS,
    pub PinFunction: ACPI_RESOURCE_PIN_FUNCTION,
    pub PinConfig: ACPI_RESOURCE_PIN_CONFIG,
    pub PinGroup: ACPI_RESOURCE_PIN_GROUP,
    pub PinGroupFunction: ACPI_RESOURCE_PIN_GROUP_FUNCTION,
    pub PinGroupConfig: ACPI_RESOURCE_PIN_GROUP_CONFIG,
    pub Address: ACPI_RESOURCE_ADDRESS,
    _bindgen_union_align: [u8; 60usize],
}
pub type ACPI_RESOURCE_DATA = acpi_resource_data;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_resource {
    pub Type: UINT32,
    pub Length: UINT32,
    pub Data: ACPI_RESOURCE_DATA,
}
pub type ACPI_RESOURCE = acpi_resource;
pub const ACPI_EXECUTE_TYPE_OSL_GLOBAL_LOCK_HANDLER: ACPI_EXECUTE_TYPE = 0;
pub const ACPI_EXECUTE_TYPE_OSL_NOTIFY_HANDLER: ACPI_EXECUTE_TYPE = 1;
pub const ACPI_EXECUTE_TYPE_OSL_GPE_HANDLER: ACPI_EXECUTE_TYPE = 2;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_MAIN_THREAD: ACPI_EXECUTE_TYPE = 3;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_EXEC_THREAD: ACPI_EXECUTE_TYPE = 4;
pub const ACPI_EXECUTE_TYPE_OSL_EC_POLL_HANDLER: ACPI_EXECUTE_TYPE = 5;
pub const ACPI_EXECUTE_TYPE_OSL_EC_BURST_HANDLER: ACPI_EXECUTE_TYPE = 6;
pub type ACPI_EXECUTE_TYPE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pld_info {
    pub Revision: UINT8,
    pub IgnoreColor: UINT8,
    pub Red: UINT8,
    pub Green: UINT8,
    pub Blue: UINT8,
    pub Width: UINT16,
    pub Height: UINT16,
    pub UserVisible: UINT8,
    pub Dock: UINT8,
    pub Lid: UINT8,
    pub Panel: UINT8,
    pub VerticalPosition: UINT8,
    pub HorizontalPosition: UINT8,
    pub Shape: UINT8,
    pub GroupOrientation: UINT8,
    pub GroupToken: UINT8,
    pub GroupPosition: UINT8,
    pub Bay: UINT8,
    pub Ejectable: UINT8,
    pub OspmEjectRequired: UINT8,
    pub CabinetNumber: UINT8,
    pub CardCageNumber: UINT8,
    pub Reference: UINT8,
    pub Rotation: UINT8,
    pub Order: UINT8,
    pub Reserved: UINT8,
    pub VerticalOffset: UINT16,
    pub HorizontalOffset: UINT16,
}
pub type ACPI_PLD_INFO = acpi_pld_info;
extern "C" {
    pub fn AcpiInitializeTables(
        InitialStorage: *mut ACPI_TABLE_DESC,
        InitialTableCount: UINT32,
        AllowResize: BOOLEAN,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInitializeSubsystem() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableSubsystem(Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInitializeObjects(Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiTerminate() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSubsystemStatus() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetSystemInfo(RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetStatistics(Stats: *mut ACPI_STATISTICS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFormatException(Exception: ACPI_STATUS) -> *const i8;
}
extern "C" {
    pub fn AcpiPurgeCachedObjects() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUpdateInterfaces(Action: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiCheckAddressRange(
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Address: ACPI_PHYSICAL_ADDRESS,
        Length: ACPI_SIZE,
        Warn: BOOLEAN,
    ) -> UINT32;
}
extern "C" {
    pub fn AcpiDecodePldBuffer(
        InBuffer: *mut UINT8,
        Length: ACPI_SIZE,
        ReturnBuffer: *mut *mut ACPI_PLD_INFO,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallTable(Address: ACPI_PHYSICAL_ADDRESS, Physical: BOOLEAN) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLoadTable(Table: *mut ACPI_TABLE_HEADER, TableIdx: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUnloadTable(TableIndex: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUnloadParentTable(Object: ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLoadTables() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReallocateRootTable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFindRootPointer(RsdpAddress: *mut ACPI_PHYSICAL_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTableHeader(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTableHeader: *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTable(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiPutTable(Table: *mut ACPI_TABLE_HEADER);
}
extern "C" {
    pub fn AcpiGetTableByIndex(
        TableIndex: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallTableHandler(
        Handler: ACPI_TABLE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveTableHandler(Handler: ACPI_TABLE_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkNamespace(
        Type: ACPI_OBJECT_TYPE,
        StartObject: ACPI_HANDLE,
        MaxDepth: UINT32,
        DescendingCallback: ACPI_WALK_CALLBACK,
        AscendingCallback: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetDevices(
        HID: *mut i8,
        UserFunction: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetName(
        Object: ACPI_HANDLE,
        NameType: UINT32,
        RetPathPtr: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetHandle(
        Parent: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        RetHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAttachData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDetachData(Object: ACPI_HANDLE, Handler: ACPI_OBJECT_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDebugTrace(
        Name: *const i8,
        DebugLevel: UINT32,
        DebugLayer: UINT32,
        Flags: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEvaluateObject(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ParameterObjects: *mut ACPI_OBJECT_LIST,
        ReturnObjectBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEvaluateObjectTyped(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ExternalParams: *mut ACPI_OBJECT_LIST,
        ReturnBuffer: *mut ACPI_BUFFER,
        ReturnType: ACPI_OBJECT_TYPE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetObjectInfo(
        Object: ACPI_HANDLE,
        ReturnBuffer: *mut *mut ACPI_DEVICE_INFO,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallMethod(Buffer: *mut UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetNextObject(
        Type: ACPI_OBJECT_TYPE,
        Parent: ACPI_HANDLE,
        Child: ACPI_HANDLE,
        OutHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetType(Object: ACPI_HANDLE, OutType: *mut ACPI_OBJECT_TYPE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetParent(Object: ACPI_HANDLE, OutHandle: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInitializationHandler(
        Handler: ACPI_INIT_HANDLER,
        Function: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallSciHandler(
        Address: ACPI_SCI_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveSciHandler(Address: ACPI_SCI_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGlobalEventHandler(
        Handler: ACPI_GBL_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeRawHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Address: ACPI_GPE_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
        Setup: ACPI_ADR_SPACE_SETUP,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallExceptionHandler(Handler: ACPI_EXCEPTION_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInterfaceHandler(Handler: ACPI_INTERFACE_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAcquireGlobalLock(Timeout: UINT16, Handle: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReleaseGlobalLock(Handle: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAcquireMutex(
        Handle: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        Timeout: UINT16,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReleaseMutex(Handle: ACPI_HANDLE, Pathname: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiClearEvent(Event: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetEventStatus(Event: UINT32, EventStatus: *mut ACPI_EVENT_STATUS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUpdateAllGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiClearGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, Action: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFinishGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiMaskGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, IsMasked: BOOLEAN)
        -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiMarkGpeForWake(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetupGpeForWake(
        ParentDevice: ACPI_HANDLE,
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetGpeWakeMask(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Action: UINT8,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetGpeStatus(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        EventStatus: *mut ACPI_EVENT_STATUS,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDispatchGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> UINT32;
}
extern "C" {
    pub fn AcpiDisableAllGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableAllRuntimeGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableAllWakeupGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAnyGpeStatusSet() -> UINT32;
}
extern "C" {
    pub fn AcpiGetGpeDevice(GpeIndex: UINT32, GpeDevice: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeBlock(
        GpeDevice: ACPI_HANDLE,
        GpeBlockAddress: *mut ACPI_GENERIC_ADDRESS,
        RegisterCount: UINT32,
        InterruptNumber: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveGpeBlock(GpeDevice: ACPI_HANDLE) -> ACPI_STATUS;
}
#[doc = " ACPICA public interface prototypes"]
#[doc = ""]
pub type ACPI_WALK_RESOURCE_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Resource: *mut ACPI_RESOURCE,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
extern "C" {
    pub fn AcpiGetVendorResource(
        Device: ACPI_HANDLE,
        Name: *mut i8,
        Uuid: *mut ACPI_VENDOR_UUID,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetCurrentResources(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER)
        -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetPossibleResources(
        Device: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetEventResources(
        DeviceHandle: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkResourceBuffer(
        Buffer: *mut ACPI_BUFFER,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkResources(
        Device: ACPI_HANDLE,
        Name: *mut i8,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetCurrentResources(Device: ACPI_HANDLE, InBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetIrqRoutingTable(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiResourceToAddress64(
        Resource: *mut ACPI_RESOURCE,
        Out: *mut ACPI_RESOURCE_ADDRESS64,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiBufferToResource(
        AmlBuffer: *mut UINT8,
        AmlBufferLength: UINT16,
        ResourcePtr: *mut *mut ACPI_RESOURCE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReset() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRead(Value: *mut UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWrite(Value: UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReadBitRegister(RegisterId: UINT32, ReturnValue: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWriteBitRegister(RegisterId: UINT32, Value: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetSleepTypeData(
        SleepState: UINT8,
        Slp_TypA: *mut UINT8,
        Slp_TypB: *mut UINT8,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepStateS4bios() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLeaveSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLeaveSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetFirmwareWakingVector(
        PhysicalAddress: ACPI_PHYSICAL_ADDRESS,
        PhysicalAddress64: ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimerResolution(Resolution: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimer(Ticks: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimerDuration(
        StartTicks: UINT32,
        EndTicks: UINT32,
        TimeElapsed: *mut UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiError(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiException(
        ModuleName: *const i8,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const i8,
        ...
    );
}
extern "C" {
    pub fn AcpiWarning(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiInfo(Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiBiosError(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiBiosException(
        ModuleName: *const i8,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const i8,
        ...
    );
}
extern "C" {
    pub fn AcpiBiosWarning(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiInitializeDebugger() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiTerminateDebugger();
}
extern "C" {
    pub fn AcpiRunDebugger(BatchBuffer: *mut i8);
}
extern "C" {
    pub fn AcpiSetDebuggerThreadId(ThreadId: UINT64);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: u32,
    pub fp_offset: u32,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
