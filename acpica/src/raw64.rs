/* automatically generated by rust-bindgen */

pub const ACPI_BINARY_SEMAPHORE: u32 = 0;
pub const ACPI_OSL_MUTEX: u32 = 1;
pub const ACPI_DEBUGGER: u32 = 1;
pub const ACPI_DISASSEMBLER: u32 = 1;
pub const ACPI_SRC_OS_LF_ONLY: u32 = 0;
pub const ACPI_MACHINE_WIDTH: u32 = 64;
pub const ACPI_MUTEX_TYPE: u32 = 0;
pub const ACPI_ASCII_MAX: u32 = 127;
pub const ACPI_MAX_GPE_BLOCKS: u32 = 2;
pub const ACPI_GPE_REGISTER_WIDTH: u32 = 8;
pub const ACPI_PM1_REGISTER_WIDTH: u32 = 16;
pub const ACPI_PM2_REGISTER_WIDTH: u32 = 8;
pub const ACPI_PM_TIMER_WIDTH: u32 = 32;
pub const ACPI_RESET_REGISTER_WIDTH: u32 = 8;
pub const ACPI_NAMESEG_SIZE: u32 = 4;
pub const ACPI_PATH_SEGMENT_LENGTH: u32 = 5;
pub const ACPI_PATH_SEPARATOR: u8 = 46u8;
pub const ACPI_OEM_ID_SIZE: u32 = 6;
pub const ACPI_OEM_TABLE_ID_SIZE: u32 = 8;
pub const ACPI_PM_TIMER_FREQUENCY: u32 = 3579545;
pub const ACPI_MSEC_PER_SEC: u32 = 1000;
pub const ACPI_USEC_PER_MSEC: u32 = 1000;
pub const ACPI_USEC_PER_SEC: u32 = 1000000;
pub const ACPI_100NSEC_PER_USEC: u32 = 10;
pub const ACPI_100NSEC_PER_MSEC: u32 = 10000;
pub const ACPI_100NSEC_PER_SEC: u32 = 10000000;
pub const ACPI_NSEC_PER_USEC: u32 = 1000;
pub const ACPI_NSEC_PER_MSEC: u32 = 1000000;
pub const ACPI_NSEC_PER_SEC: u32 = 1000000000;
pub const ACPI_OWNER_ID_MAX: u32 = 4095;
pub const ACPI_INTEGER_BIT_SIZE: u32 = 64;
pub const ACPI_MAX_DECIMAL_DIGITS: u32 = 20;
pub const ACPI_MAX64_DECIMAL_DIGITS: u32 = 20;
pub const ACPI_MAX32_DECIMAL_DIGITS: u32 = 10;
pub const ACPI_MAX16_DECIMAL_DIGITS: u32 = 5;
pub const ACPI_MAX8_DECIMAL_DIGITS: u32 = 3;
pub const ACPI_WAIT_FOREVER: u32 = 65535;
pub const ACPI_DO_NOT_WAIT: u32 = 0;
pub const ACPI_FULL_INITIALIZATION: u32 = 0;
pub const ACPI_NO_FACS_INIT: u32 = 1;
pub const ACPI_NO_ACPI_ENABLE: u32 = 2;
pub const ACPI_NO_HARDWARE_INIT: u32 = 4;
pub const ACPI_NO_EVENT_INIT: u32 = 8;
pub const ACPI_NO_HANDLER_INIT: u32 = 16;
pub const ACPI_NO_OBJECT_INIT: u32 = 32;
pub const ACPI_NO_DEVICE_INIT: u32 = 64;
pub const ACPI_NO_ADDRESS_SPACE_INIT: u32 = 128;
pub const ACPI_SUBSYSTEM_INITIALIZE: u32 = 1;
pub const ACPI_INITIALIZED_OK: u32 = 2;
pub const ACPI_S_STATE_COUNT: u32 = 6;
pub const ACPI_D_STATE_COUNT: u32 = 4;
pub const ACPI_C_STATE_COUNT: u32 = 4;
pub const ACPI_SLEEP_TYPE_MAX: u32 = 7;
pub const ACPI_SLEEP_TYPE_INVALID: u32 = 255;
pub const ACPI_GENERIC_NOTIFY_MAX: u32 = 15;
pub const ACPI_SPECIFIC_NOTIFY_MAX: u32 = 132;
pub const ACPI_TYPE_ANY: u32 = 0;
pub const ACPI_TYPE_INTEGER: u32 = 1;
pub const ACPI_TYPE_STRING: u32 = 2;
pub const ACPI_TYPE_BUFFER: u32 = 3;
pub const ACPI_TYPE_PACKAGE: u32 = 4;
pub const ACPI_TYPE_FIELD_UNIT: u32 = 5;
pub const ACPI_TYPE_DEVICE: u32 = 6;
pub const ACPI_TYPE_EVENT: u32 = 7;
pub const ACPI_TYPE_METHOD: u32 = 8;
pub const ACPI_TYPE_MUTEX: u32 = 9;
pub const ACPI_TYPE_REGION: u32 = 10;
pub const ACPI_TYPE_POWER: u32 = 11;
pub const ACPI_TYPE_PROCESSOR: u32 = 12;
pub const ACPI_TYPE_THERMAL: u32 = 13;
pub const ACPI_TYPE_BUFFER_FIELD: u32 = 14;
pub const ACPI_TYPE_DDB_HANDLE: u32 = 15;
pub const ACPI_TYPE_DEBUG_OBJECT: u32 = 16;
pub const ACPI_TYPE_EXTERNAL_MAX: u32 = 16;
pub const ACPI_NUM_TYPES: u32 = 17;
pub const ACPI_TYPE_LOCAL_REGION_FIELD: u32 = 17;
pub const ACPI_TYPE_LOCAL_BANK_FIELD: u32 = 18;
pub const ACPI_TYPE_LOCAL_INDEX_FIELD: u32 = 19;
pub const ACPI_TYPE_LOCAL_REFERENCE: u32 = 20;
pub const ACPI_TYPE_LOCAL_ALIAS: u32 = 21;
pub const ACPI_TYPE_LOCAL_METHOD_ALIAS: u32 = 22;
pub const ACPI_TYPE_LOCAL_NOTIFY: u32 = 23;
pub const ACPI_TYPE_LOCAL_ADDRESS_HANDLER: u32 = 24;
pub const ACPI_TYPE_LOCAL_RESOURCE: u32 = 25;
pub const ACPI_TYPE_LOCAL_RESOURCE_FIELD: u32 = 26;
pub const ACPI_TYPE_LOCAL_SCOPE: u32 = 27;
pub const ACPI_TYPE_NS_NODE_MAX: u32 = 27;
pub const ACPI_TOTAL_TYPES: u32 = 28;
pub const ACPI_TYPE_LOCAL_EXTRA: u32 = 28;
pub const ACPI_TYPE_LOCAL_DATA: u32 = 29;
pub const ACPI_TYPE_LOCAL_MAX: u32 = 29;
pub const ACPI_TYPE_INVALID: u32 = 30;
pub const ACPI_TYPE_NOT_FOUND: u32 = 255;
pub const ACPI_NUM_NS_TYPES: u32 = 31;
pub const ACPI_READ: u32 = 0;
pub const ACPI_WRITE: u32 = 1;
pub const ACPI_IO_MASK: u32 = 1;
pub const ACPI_EVENT_PMTIMER: u32 = 0;
pub const ACPI_EVENT_GLOBAL: u32 = 1;
pub const ACPI_EVENT_POWER_BUTTON: u32 = 2;
pub const ACPI_EVENT_SLEEP_BUTTON: u32 = 3;
pub const ACPI_EVENT_RTC: u32 = 4;
pub const ACPI_EVENT_MAX: u32 = 4;
pub const ACPI_NUM_FIXED_EVENTS: u32 = 5;
pub const ACPI_GPE_ENABLE: u32 = 0;
pub const ACPI_GPE_DISABLE: u32 = 1;
pub const ACPI_GPE_CONDITIONAL_ENABLE: u32 = 2;
pub const ACPI_NOT_ISR: u32 = 1;
pub const ACPI_ISR: u32 = 0;
pub const ACPI_SYSTEM_NOTIFY: u32 = 1;
pub const ACPI_DEVICE_NOTIFY: u32 = 2;
pub const ACPI_ALL_NOTIFY: u32 = 3;
pub const ACPI_MAX_NOTIFY_HANDLER_TYPE: u32 = 3;
pub const ACPI_NUM_NOTIFY_TYPES: u32 = 2;
pub const ACPI_MAX_SYS_NOTIFY: u32 = 127;
pub const ACPI_MAX_DEVICE_SPECIFIC_NOTIFY: u32 = 191;
pub const ACPI_SYSTEM_HANDLER_LIST: u32 = 0;
pub const ACPI_DEVICE_HANDLER_LIST: u32 = 1;
pub const ACPI_NUM_PREDEFINED_REGIONS: u32 = 11;
pub const ACPI_REG_DISCONNECT: u32 = 0;
pub const ACPI_REG_CONNECT: u32 = 1;
pub const ACPI_BITREG_TIMER_STATUS: u32 = 0;
pub const ACPI_BITREG_BUS_MASTER_STATUS: u32 = 1;
pub const ACPI_BITREG_GLOBAL_LOCK_STATUS: u32 = 2;
pub const ACPI_BITREG_POWER_BUTTON_STATUS: u32 = 3;
pub const ACPI_BITREG_SLEEP_BUTTON_STATUS: u32 = 4;
pub const ACPI_BITREG_RT_CLOCK_STATUS: u32 = 5;
pub const ACPI_BITREG_WAKE_STATUS: u32 = 6;
pub const ACPI_BITREG_PCIEXP_WAKE_STATUS: u32 = 7;
pub const ACPI_BITREG_TIMER_ENABLE: u32 = 8;
pub const ACPI_BITREG_GLOBAL_LOCK_ENABLE: u32 = 9;
pub const ACPI_BITREG_POWER_BUTTON_ENABLE: u32 = 10;
pub const ACPI_BITREG_SLEEP_BUTTON_ENABLE: u32 = 11;
pub const ACPI_BITREG_RT_CLOCK_ENABLE: u32 = 12;
pub const ACPI_BITREG_PCIEXP_WAKE_DISABLE: u32 = 13;
pub const ACPI_BITREG_SCI_ENABLE: u32 = 14;
pub const ACPI_BITREG_BUS_MASTER_RLD: u32 = 15;
pub const ACPI_BITREG_GLOBAL_LOCK_RELEASE: u32 = 16;
pub const ACPI_BITREG_SLEEP_TYPE: u32 = 17;
pub const ACPI_BITREG_SLEEP_ENABLE: u32 = 18;
pub const ACPI_BITREG_ARB_DISABLE: u32 = 19;
pub const ACPI_BITREG_MAX: u32 = 19;
pub const ACPI_NUM_BITREG: u32 = 20;
pub const ACPI_CLEAR_STATUS: u32 = 1;
pub const ACPI_ENABLE_EVENT: u32 = 1;
pub const ACPI_DISABLE_EVENT: u32 = 0;
pub const ACPI_NO_BUFFER: u32 = 0;
pub const ACPI_FULL_PATHNAME: u32 = 0;
pub const ACPI_SINGLE_NAME: u32 = 1;
pub const ACPI_FULL_PATHNAME_NO_TRAILING: u32 = 2;
pub const ACPI_NAME_TYPE_MAX: u32 = 2;
pub const ACPI_SYS_MODE_UNKNOWN: u32 = 0;
pub const ACPI_SYS_MODE_ACPI: u32 = 1;
pub const ACPI_SYS_MODE_LEGACY: u32 = 2;
pub const ACPI_SYS_MODES_MASK: u32 = 3;
pub const ACPI_EVENT_TYPE_GPE: u32 = 0;
pub const ACPI_EVENT_TYPE_FIXED: u32 = 1;
pub const ACPI_INIT_DEVICE_INI: u32 = 1;
pub const ACPI_TABLE_EVENT_LOAD: u32 = 0;
pub const ACPI_TABLE_EVENT_UNLOAD: u32 = 1;
pub const ACPI_TABLE_EVENT_INSTALL: u32 = 2;
pub const ACPI_TABLE_EVENT_UNINSTALL: u32 = 3;
pub const ACPI_NUM_TABLE_EVENTS: u32 = 4;
pub const ACPI_REGION_ACTIVATE: u32 = 0;
pub const ACPI_REGION_DEACTIVATE: u32 = 1;
pub const ACPI_INTERRUPT_NOT_HANDLED: u32 = 0;
pub const ACPI_INTERRUPT_HANDLED: u32 = 1;
pub const ACPI_REENABLE_GPE: u32 = 128;
pub const ACPI_EISAID_STRING_SIZE: u32 = 8;
pub const ACPI_UUID_LENGTH: u32 = 16;
pub const ACPI_PCICLS_STRING_SIZE: u32 = 7;
pub const ACPI_PCI_ROOT_BRIDGE: u32 = 1;
pub const ACPI_VALID_ADR: u32 = 2;
pub const ACPI_VALID_HID: u32 = 4;
pub const ACPI_VALID_UID: u32 = 8;
pub const ACPI_VALID_CID: u32 = 32;
pub const ACPI_VALID_CLS: u32 = 64;
pub const ACPI_VALID_SXDS: u32 = 256;
pub const ACPI_VALID_SXWS: u32 = 512;
pub const ACPI_STA_DEVICE_PRESENT: u32 = 1;
pub const ACPI_STA_DEVICE_ENABLED: u32 = 2;
pub const ACPI_STA_DEVICE_UI: u32 = 4;
pub const ACPI_STA_DEVICE_FUNCTIONING: u32 = 8;
pub const ACPI_STA_DEVICE_OK: u32 = 8;
pub const ACPI_STA_BATTERY_PRESENT: u32 = 16;
pub const ACPI_VENDOR_STRINGS: u32 = 1;
pub const ACPI_FEATURE_STRINGS: u32 = 2;
pub const ACPI_ENABLE_INTERFACES: u32 = 0;
pub const ACPI_DISABLE_INTERFACES: u32 = 4;
pub const ACPI_DISABLE_ALL_VENDOR_STRINGS: u32 = 5;
pub const ACPI_DISABLE_ALL_FEATURE_STRINGS: u32 = 6;
pub const ACPI_DISABLE_ALL_STRINGS: u32 = 7;
pub const ACPI_ENABLE_ALL_VENDOR_STRINGS: u32 = 1;
pub const ACPI_ENABLE_ALL_FEATURE_STRINGS: u32 = 2;
pub const ACPI_ENABLE_ALL_STRINGS: u32 = 3;
pub const ACPI_OSI_WIN_2000: u32 = 1;
pub const ACPI_OSI_WIN_XP: u32 = 2;
pub const ACPI_OSI_WIN_XP_SP1: u32 = 3;
pub const ACPI_OSI_WINSRV_2003: u32 = 4;
pub const ACPI_OSI_WIN_XP_SP2: u32 = 5;
pub const ACPI_OSI_WINSRV_2003_SP1: u32 = 6;
pub const ACPI_OSI_WIN_VISTA: u32 = 7;
pub const ACPI_OSI_WINSRV_2008: u32 = 8;
pub const ACPI_OSI_WIN_VISTA_SP1: u32 = 9;
pub const ACPI_OSI_WIN_VISTA_SP2: u32 = 10;
pub const ACPI_OSI_WIN_7: u32 = 11;
pub const ACPI_OSI_WIN_8: u32 = 12;
pub const ACPI_OSI_WIN_8_1: u32 = 13;
pub const ACPI_OSI_WIN_10: u32 = 14;
pub const ACPI_OSI_WIN_10_RS1: u32 = 15;
pub const ACPI_OSI_WIN_10_RS2: u32 = 16;
pub const ACPI_OSI_WIN_10_RS3: u32 = 17;
pub const ACPI_OSI_WIN_10_RS4: u32 = 18;
pub const ACPI_OSI_WIN_10_RS5: u32 = 19;
pub const ACPI_OSI_WIN_10_19H1: u32 = 20;
pub const ACPI_OPT_END: i32 = -1;
pub const ACPI_ROOT_PATHNAME: &'static [u8; 5usize] = b"\\___\0";
pub const ACPI_NAMESPACE_ROOT: &'static [u8; 15usize] = b"Namespace Root\0";
pub const ACPI_NS_ROOT_PATH: &'static [u8; 2usize] = b"\\\0";
pub const ACPI_SIG_DSDT: &'static [u8; 5usize] = b"DSDT\0";
pub const ACPI_SIG_FADT: &'static [u8; 5usize] = b"FACP\0";
pub const ACPI_SIG_FACS: &'static [u8; 5usize] = b"FACS\0";
pub const ACPI_SIG_OSDT: &'static [u8; 5usize] = b"OSDT\0";
pub const ACPI_SIG_PSDT: &'static [u8; 5usize] = b"PSDT\0";
pub const ACPI_SIG_RSDP: &'static [u8; 9usize] = b"RSD PTR \0";
pub const ACPI_SIG_RSDT: &'static [u8; 5usize] = b"RSDT\0";
pub const ACPI_SIG_XSDT: &'static [u8; 5usize] = b"XSDT\0";
pub const ACPI_SIG_SSDT: &'static [u8; 5usize] = b"SSDT\0";
pub const ACPI_RSDP_NAME: &'static [u8; 5usize] = b"RSDP\0";
pub const ACPI_OEM_NAME: &'static [u8; 4usize] = b"OEM\0";
pub const ACPI_GLOCK_PENDING: u32 = 1;
pub const ACPI_GLOCK_OWNED: u32 = 2;
pub const ACPI_FACS_S4_BIOS_PRESENT: u32 = 1;
pub const ACPI_FACS_64BIT_WAKE: u32 = 2;
pub const ACPI_FACS_64BIT_ENVIRONMENT: u32 = 1;
pub const ACPI_FADT_LEGACY_DEVICES: u32 = 1;
pub const ACPI_FADT_8042: u32 = 2;
pub const ACPI_FADT_NO_VGA: u32 = 4;
pub const ACPI_FADT_NO_MSI: u32 = 8;
pub const ACPI_FADT_NO_ASPM: u32 = 16;
pub const ACPI_FADT_NO_CMOS_RTC: u32 = 32;
pub const ACPI_FADT_PSCI_COMPLIANT: u32 = 1;
pub const ACPI_FADT_PSCI_USE_HVC: u32 = 2;
pub const ACPI_FADT_WBINVD: u32 = 1;
pub const ACPI_FADT_WBINVD_FLUSH: u32 = 2;
pub const ACPI_FADT_C1_SUPPORTED: u32 = 4;
pub const ACPI_FADT_C2_MP_SUPPORTED: u32 = 8;
pub const ACPI_FADT_POWER_BUTTON: u32 = 16;
pub const ACPI_FADT_SLEEP_BUTTON: u32 = 32;
pub const ACPI_FADT_FIXED_RTC: u32 = 64;
pub const ACPI_FADT_S4_RTC_WAKE: u32 = 128;
pub const ACPI_FADT_32BIT_TIMER: u32 = 256;
pub const ACPI_FADT_DOCKING_SUPPORTED: u32 = 512;
pub const ACPI_FADT_RESET_REGISTER: u32 = 1024;
pub const ACPI_FADT_SEALED_CASE: u32 = 2048;
pub const ACPI_FADT_HEADLESS: u32 = 4096;
pub const ACPI_FADT_SLEEP_TYPE: u32 = 8192;
pub const ACPI_FADT_PCI_EXPRESS_WAKE: u32 = 16384;
pub const ACPI_FADT_PLATFORM_CLOCK: u32 = 32768;
pub const ACPI_FADT_S4_RTC_VALID: u32 = 65536;
pub const ACPI_FADT_REMOTE_POWER_ON: u32 = 131072;
pub const ACPI_FADT_APIC_CLUSTER: u32 = 262144;
pub const ACPI_FADT_APIC_PHYSICAL: u32 = 524288;
pub const ACPI_FADT_HW_REDUCED: u32 = 1048576;
pub const ACPI_FADT_LOW_POWER_S0: u32 = 2097152;
pub const ACPI_X_WAKE_STATUS: u32 = 128;
pub const ACPI_X_SLEEP_TYPE_MASK: u32 = 28;
pub const ACPI_X_SLEEP_TYPE_POSITION: u32 = 2;
pub const ACPI_X_SLEEP_ENABLE: u32 = 32;
pub const ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL: u32 = 0;
pub const ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL: u32 = 1;
pub const ACPI_TABLE_ORIGIN_INTERNAL_VIRTUAL: u32 = 2;
pub const ACPI_TABLE_ORIGIN_MASK: u32 = 3;
pub const ACPI_TABLE_IS_VERIFIED: u32 = 4;
pub const ACPI_TABLE_IS_LOADED: u32 = 8;
pub const ACPI_SIG_ASF: &'static [u8; 5usize] = b"ASF!\0";
pub const ACPI_SIG_BERT: &'static [u8; 5usize] = b"BERT\0";
pub const ACPI_SIG_BGRT: &'static [u8; 5usize] = b"BGRT\0";
pub const ACPI_SIG_BOOT: &'static [u8; 5usize] = b"BOOT\0";
pub const ACPI_SIG_CPEP: &'static [u8; 5usize] = b"CPEP\0";
pub const ACPI_SIG_CSRT: &'static [u8; 5usize] = b"CSRT\0";
pub const ACPI_SIG_DBG2: &'static [u8; 5usize] = b"DBG2\0";
pub const ACPI_SIG_DBGP: &'static [u8; 5usize] = b"DBGP\0";
pub const ACPI_SIG_DMAR: &'static [u8; 5usize] = b"DMAR\0";
pub const ACPI_SIG_DRTM: &'static [u8; 5usize] = b"DRTM\0";
pub const ACPI_SIG_ECDT: &'static [u8; 5usize] = b"ECDT\0";
pub const ACPI_SIG_EINJ: &'static [u8; 5usize] = b"EINJ\0";
pub const ACPI_SIG_ERST: &'static [u8; 5usize] = b"ERST\0";
pub const ACPI_SIG_FPDT: &'static [u8; 5usize] = b"FPDT\0";
pub const ACPI_SIG_GTDT: &'static [u8; 5usize] = b"GTDT\0";
pub const ACPI_SIG_HEST: &'static [u8; 5usize] = b"HEST\0";
pub const ACPI_SIG_HMAT: &'static [u8; 5usize] = b"HMAT\0";
pub const ACPI_SIG_HPET: &'static [u8; 5usize] = b"HPET\0";
pub const ACPI_SIG_IBFT: &'static [u8; 5usize] = b"IBFT\0";
pub const ACPI_SIG_S3PT: &'static [u8; 5usize] = b"S3PT\0";
pub const ACPI_SIG_PCCS: &'static [u8; 4usize] = b"PCC\0";
pub const ACPI_SIG_MATR: &'static [u8; 5usize] = b"MATR\0";
pub const ACPI_SIG_MSDM: &'static [u8; 5usize] = b"MSDM\0";
pub const ACPI_ASF_SMBUS_PROTOCOLS: u32 = 1;
pub const ACPI_BERT_UNCORRECTABLE: u32 = 1;
pub const ACPI_BERT_CORRECTABLE: u32 = 2;
pub const ACPI_BERT_MULTIPLE_UNCORRECTABLE: u32 = 4;
pub const ACPI_BERT_MULTIPLE_CORRECTABLE: u32 = 8;
pub const ACPI_BERT_ERROR_ENTRY_COUNT: u32 = 4080;
pub const ACPI_BGRT_DISPLAYED: u32 = 1;
pub const ACPI_BGRT_ORIENTATION_OFFSET: u32 = 6;
pub const ACPI_CSRT_TYPE_INTERRUPT: u32 = 1;
pub const ACPI_CSRT_TYPE_TIMER: u32 = 2;
pub const ACPI_CSRT_TYPE_DMA: u32 = 3;
pub const ACPI_CSRT_XRUPT_LINE: u32 = 0;
pub const ACPI_CSRT_XRUPT_CONTROLLER: u32 = 1;
pub const ACPI_CSRT_TIMER: u32 = 0;
pub const ACPI_CSRT_DMA_CHANNEL: u32 = 0;
pub const ACPI_CSRT_DMA_CONTROLLER: u32 = 1;
pub const ACPI_DBG2_SERIAL_PORT: u32 = 32768;
pub const ACPI_DBG2_1394_PORT: u32 = 32769;
pub const ACPI_DBG2_USB_PORT: u32 = 32770;
pub const ACPI_DBG2_NET_PORT: u32 = 32771;
pub const ACPI_DBG2_16550_COMPATIBLE: u32 = 0;
pub const ACPI_DBG2_16550_SUBSET: u32 = 1;
pub const ACPI_DBG2_ARM_PL011: u32 = 3;
pub const ACPI_DBG2_ARM_SBSA_32BIT: u32 = 13;
pub const ACPI_DBG2_ARM_SBSA_GENERIC: u32 = 14;
pub const ACPI_DBG2_ARM_DCC: u32 = 15;
pub const ACPI_DBG2_BCM2835: u32 = 16;
pub const ACPI_DBG2_1394_STANDARD: u32 = 0;
pub const ACPI_DBG2_USB_XHCI: u32 = 0;
pub const ACPI_DBG2_USB_EHCI: u32 = 1;
pub const ACPI_DMAR_INTR_REMAP: u32 = 1;
pub const ACPI_DMAR_X2APIC_OPT_OUT: u32 = 2;
pub const ACPI_DMAR_X2APIC_MODE: u32 = 4;
pub const ACPI_DMAR_INCLUDE_ALL: u32 = 1;
pub const ACPI_DMAR_ALLOW_ALL: u32 = 1;
pub const ACPI_DMAR_ALL_PORTS: u32 = 1;
pub const ACPI_DRTM_ACCESS_ALLOWED: u32 = 1;
pub const ACPI_DRTM_ENABLE_GAP_CODE: u32 = 2;
pub const ACPI_DRTM_INCOMPLETE_MEASUREMENTS: u32 = 4;
pub const ACPI_DRTM_AUTHORITY_ORDER: u32 = 8;
pub const ACPI_EINJ_PRESERVE: u32 = 1;
pub const ACPI_EINJ_PROCESSOR_CORRECTABLE: u32 = 1;
pub const ACPI_EINJ_PROCESSOR_UNCORRECTABLE: u32 = 2;
pub const ACPI_EINJ_PROCESSOR_FATAL: u32 = 4;
pub const ACPI_EINJ_MEMORY_CORRECTABLE: u32 = 8;
pub const ACPI_EINJ_MEMORY_UNCORRECTABLE: u32 = 16;
pub const ACPI_EINJ_MEMORY_FATAL: u32 = 32;
pub const ACPI_EINJ_PCIX_CORRECTABLE: u32 = 64;
pub const ACPI_EINJ_PCIX_UNCORRECTABLE: u32 = 128;
pub const ACPI_EINJ_PCIX_FATAL: u32 = 256;
pub const ACPI_EINJ_PLATFORM_CORRECTABLE: u32 = 512;
pub const ACPI_EINJ_PLATFORM_UNCORRECTABLE: u32 = 1024;
pub const ACPI_EINJ_PLATFORM_FATAL: u32 = 2048;
pub const ACPI_EINJ_VENDOR_DEFINED: u32 = 2147483648;
pub const ACPI_ERST_PRESERVE: u32 = 1;
pub const ACPI_GTDT_INTERRUPT_MODE: u32 = 1;
pub const ACPI_GTDT_INTERRUPT_POLARITY: u32 = 2;
pub const ACPI_GTDT_ALWAYS_ON: u32 = 4;
pub const ACPI_GTDT_GT_IRQ_MODE: u32 = 1;
pub const ACPI_GTDT_GT_IRQ_POLARITY: u32 = 2;
pub const ACPI_GTDT_GT_IS_SECURE_TIMER: u32 = 1;
pub const ACPI_GTDT_GT_ALWAYS_ON: u32 = 2;
pub const ACPI_GTDT_WATCHDOG_IRQ_MODE: u32 = 1;
pub const ACPI_GTDT_WATCHDOG_IRQ_POLARITY: u32 = 2;
pub const ACPI_GTDT_WATCHDOG_SECURE: u32 = 4;
pub const ACPI_HEST_FIRMWARE_FIRST: u32 = 1;
pub const ACPI_HEST_GLOBAL: u32 = 2;
pub const ACPI_HEST_GHES_ASSIST: u32 = 4;
pub const ACPI_HEST_TYPE: u32 = 1;
pub const ACPI_HEST_POLL_INTERVAL: u32 = 2;
pub const ACPI_HEST_POLL_THRESHOLD_VALUE: u32 = 4;
pub const ACPI_HEST_POLL_THRESHOLD_WINDOW: u32 = 8;
pub const ACPI_HEST_ERR_THRESHOLD_VALUE: u32 = 16;
pub const ACPI_HEST_ERR_THRESHOLD_WINDOW: u32 = 32;
pub const ACPI_HEST_UNCORRECTABLE: u32 = 1;
pub const ACPI_HEST_CORRECTABLE: u32 = 2;
pub const ACPI_HEST_MULTIPLE_UNCORRECTABLE: u32 = 4;
pub const ACPI_HEST_MULTIPLE_CORRECTABLE: u32 = 8;
pub const ACPI_HEST_ERROR_ENTRY_COUNT: u32 = 4080;
pub const ACPI_HEST_GEN_ERROR_RECOVERABLE: u32 = 0;
pub const ACPI_HEST_GEN_ERROR_FATAL: u32 = 1;
pub const ACPI_HEST_GEN_ERROR_CORRECTED: u32 = 2;
pub const ACPI_HEST_GEN_ERROR_NONE: u32 = 3;
pub const ACPI_HEST_GEN_VALID_FRU_ID: u32 = 1;
pub const ACPI_HEST_GEN_VALID_FRU_STRING: u32 = 2;
pub const ACPI_HEST_GEN_VALID_TIMESTAMP: u32 = 4;
pub const ACPI_HMAT_PROCESSOR_PD_VALID: u32 = 1;
pub const ACPI_HMAT_MEMORY_PD_VALID: u32 = 2;
pub const ACPI_HMAT_RESERVATION_HINT: u32 = 4;
pub const ACPI_HMAT_MEMORY_HIERARCHY: u32 = 15;
pub const ACPI_HMAT_MEMORY: u32 = 0;
pub const ACPI_HMAT_LAST_LEVEL_CACHE: u32 = 1;
pub const ACPI_HMAT_1ST_LEVEL_CACHE: u32 = 2;
pub const ACPI_HMAT_2ND_LEVEL_CACHE: u32 = 3;
pub const ACPI_HMAT_3RD_LEVEL_CACHE: u32 = 4;
pub const ACPI_HMAT_ACCESS_LATENCY: u32 = 0;
pub const ACPI_HMAT_READ_LATENCY: u32 = 1;
pub const ACPI_HMAT_WRITE_LATENCY: u32 = 2;
pub const ACPI_HMAT_ACCESS_BANDWIDTH: u32 = 3;
pub const ACPI_HMAT_READ_BANDWIDTH: u32 = 4;
pub const ACPI_HMAT_WRITE_BANDWIDTH: u32 = 5;
pub const ACPI_HMAT_TOTAL_CACHE_LEVEL: u32 = 15;
pub const ACPI_HMAT_CACHE_LEVEL: u32 = 240;
pub const ACPI_HMAT_CACHE_ASSOCIATIVITY: u32 = 3840;
pub const ACPI_HMAT_WRITE_POLICY: u32 = 61440;
pub const ACPI_HMAT_CACHE_LINE_SIZE: u32 = 4294901760;
pub const ACPI_HMAT_CA_NONE: u32 = 0;
pub const ACPI_HMAT_CA_DIRECT_MAPPED: u32 = 1;
pub const ACPI_HMAT_CA_COMPLEX_CACHE_INDEXING: u32 = 2;
pub const ACPI_HMAT_CP_NONE: u32 = 0;
pub const ACPI_HMAT_CP_WB: u32 = 1;
pub const ACPI_HMAT_CP_WT: u32 = 2;
pub const ACPI_HPET_PAGE_PROTECT_MASK: u32 = 3;
pub const ACPI_SIG_IORT: &'static [u8; 5usize] = b"IORT\0";
pub const ACPI_SIG_IVRS: &'static [u8; 5usize] = b"IVRS\0";
pub const ACPI_SIG_LPIT: &'static [u8; 5usize] = b"LPIT\0";
pub const ACPI_SIG_MADT: &'static [u8; 5usize] = b"APIC\0";
pub const ACPI_SIG_MCFG: &'static [u8; 5usize] = b"MCFG\0";
pub const ACPI_SIG_MCHI: &'static [u8; 5usize] = b"MCHI\0";
pub const ACPI_SIG_MPST: &'static [u8; 5usize] = b"MPST\0";
pub const ACPI_SIG_MSCT: &'static [u8; 5usize] = b"MSCT\0";
pub const ACPI_SIG_MTMR: &'static [u8; 5usize] = b"MTMR\0";
pub const ACPI_SIG_NFIT: &'static [u8; 5usize] = b"NFIT\0";
pub const ACPI_SIG_PCCT: &'static [u8; 5usize] = b"PCCT\0";
pub const ACPI_SIG_PDTT: &'static [u8; 5usize] = b"PDTT\0";
pub const ACPI_SIG_PMTT: &'static [u8; 5usize] = b"PMTT\0";
pub const ACPI_SIG_PPTT: &'static [u8; 5usize] = b"PPTT\0";
pub const ACPI_SIG_RASF: &'static [u8; 5usize] = b"RASF\0";
pub const ACPI_SIG_SBST: &'static [u8; 5usize] = b"SBST\0";
pub const ACPI_SIG_SDEI: &'static [u8; 5usize] = b"SDEI\0";
pub const ACPI_SIG_SDEV: &'static [u8; 5usize] = b"SDEV\0";
pub const ACPI_IORT_ID_SINGLE_MAPPING: u32 = 1;
pub const ACPI_IORT_NODE_COHERENT: u32 = 1;
pub const ACPI_IORT_NODE_NOT_COHERENT: u32 = 0;
pub const ACPI_IORT_HT_TRANSIENT: u32 = 1;
pub const ACPI_IORT_HT_WRITE: u32 = 2;
pub const ACPI_IORT_HT_READ: u32 = 4;
pub const ACPI_IORT_HT_OVERRIDE: u32 = 8;
pub const ACPI_IORT_MF_COHERENCY: u32 = 1;
pub const ACPI_IORT_MF_ATTRIBUTES: u32 = 2;
pub const ACPI_IORT_NC_STALL_SUPPORTED: u32 = 1;
pub const ACPI_IORT_NC_PASID_BITS: u32 = 62;
pub const ACPI_IORT_ATS_SUPPORTED: u32 = 1;
pub const ACPI_IORT_ATS_UNSUPPORTED: u32 = 0;
pub const ACPI_IORT_SMMU_V1: u32 = 0;
pub const ACPI_IORT_SMMU_V2: u32 = 1;
pub const ACPI_IORT_SMMU_CORELINK_MMU400: u32 = 2;
pub const ACPI_IORT_SMMU_CORELINK_MMU500: u32 = 3;
pub const ACPI_IORT_SMMU_CORELINK_MMU401: u32 = 4;
pub const ACPI_IORT_SMMU_CAVIUM_THUNDERX: u32 = 5;
pub const ACPI_IORT_SMMU_DVM_SUPPORTED: u32 = 1;
pub const ACPI_IORT_SMMU_COHERENT_WALK: u32 = 2;
pub const ACPI_IORT_SMMU_V3_GENERIC: u32 = 0;
pub const ACPI_IORT_SMMU_V3_HISILICON_HI161X: u32 = 1;
pub const ACPI_IORT_SMMU_V3_CAVIUM_CN99XX: u32 = 2;
pub const ACPI_IORT_SMMU_V3_COHACC_OVERRIDE: u32 = 1;
pub const ACPI_IORT_SMMU_V3_HTTU_OVERRIDE: u32 = 6;
pub const ACPI_IORT_SMMU_V3_PXM_VALID: u32 = 8;
pub const ACPI_IVRS_PHYSICAL_SIZE: u32 = 32512;
pub const ACPI_IVRS_VIRTUAL_SIZE: u32 = 4161536;
pub const ACPI_IVRS_ATS_RESERVED: u32 = 4194304;
pub const ACPI_IVHD_TT_ENABLE: u32 = 1;
pub const ACPI_IVHD_PASS_PW: u32 = 2;
pub const ACPI_IVHD_RES_PASS_PW: u32 = 4;
pub const ACPI_IVHD_ISOC: u32 = 8;
pub const ACPI_IVHD_IOTLB: u32 = 16;
pub const ACPI_IVMD_UNITY: u32 = 1;
pub const ACPI_IVMD_READ: u32 = 2;
pub const ACPI_IVMD_WRITE: u32 = 4;
pub const ACPI_IVMD_EXCLUSION_RANGE: u32 = 8;
pub const ACPI_IVHD_MSI_NUMBER_MASK: u32 = 31;
pub const ACPI_IVHD_UNIT_ID_MASK: u32 = 7936;
pub const ACPI_IVHD_ENTRY_LENGTH: u32 = 192;
pub const ACPI_IVHD_INIT_PASS: u32 = 1;
pub const ACPI_IVHD_EINT_PASS: u32 = 2;
pub const ACPI_IVHD_NMI_PASS: u32 = 4;
pub const ACPI_IVHD_SYSTEM_MGMT: u32 = 48;
pub const ACPI_IVHD_LINT0_PASS: u32 = 64;
pub const ACPI_IVHD_LINT1_PASS: u32 = 128;
pub const ACPI_IVHD_ATS_DISABLED: u32 = 2147483648;
pub const ACPI_IVHD_IOAPIC: u32 = 1;
pub const ACPI_IVHD_HPET: u32 = 2;
pub const ACPI_LPIT_STATE_DISABLED: u32 = 1;
pub const ACPI_LPIT_NO_COUNTER: u32 = 2;
pub const ACPI_MADT_PCAT_COMPAT: u32 = 1;
pub const ACPI_MADT_DUAL_PIC: u32 = 1;
pub const ACPI_MADT_MULTIPLE_APIC: u32 = 0;
pub const ACPI_MADT_CPEI_OVERRIDE: u32 = 1;
pub const ACPI_MADT_PERFORMANCE_IRQ_MODE: u32 = 2;
pub const ACPI_MADT_VGIC_IRQ_MODE: u32 = 4;
pub const ACPI_MADT_OVERRIDE_SPI_VALUES: u32 = 1;
pub const ACPI_MADT_ENABLED: u32 = 1;
pub const ACPI_MADT_POLARITY_MASK: u32 = 3;
pub const ACPI_MADT_TRIGGER_MASK: u32 = 12;
pub const ACPI_MADT_POLARITY_CONFORMS: u32 = 0;
pub const ACPI_MADT_POLARITY_ACTIVE_HIGH: u32 = 1;
pub const ACPI_MADT_POLARITY_RESERVED: u32 = 2;
pub const ACPI_MADT_POLARITY_ACTIVE_LOW: u32 = 3;
pub const ACPI_MADT_TRIGGER_CONFORMS: u32 = 0;
pub const ACPI_MADT_TRIGGER_EDGE: u32 = 4;
pub const ACPI_MADT_TRIGGER_RESERVED: u32 = 8;
pub const ACPI_MADT_TRIGGER_LEVEL: u32 = 12;
pub const ACPI_MPST_ENABLED: u32 = 1;
pub const ACPI_MPST_POWER_MANAGED: u32 = 2;
pub const ACPI_MPST_HOT_PLUG_CAPABLE: u32 = 4;
pub const ACPI_MPST_PRESERVE: u32 = 1;
pub const ACPI_MPST_AUTOENTRY: u32 = 2;
pub const ACPI_MPST_AUTOEXIT: u32 = 4;
pub const ACPI_NFIT_ADD_ONLINE_ONLY: u32 = 1;
pub const ACPI_NFIT_PROXIMITY_VALID: u32 = 2;
pub const ACPI_NFIT_MEM_SAVE_FAILED: u32 = 1;
pub const ACPI_NFIT_MEM_RESTORE_FAILED: u32 = 2;
pub const ACPI_NFIT_MEM_FLUSH_FAILED: u32 = 4;
pub const ACPI_NFIT_MEM_NOT_ARMED: u32 = 8;
pub const ACPI_NFIT_MEM_HEALTH_OBSERVED: u32 = 16;
pub const ACPI_NFIT_MEM_HEALTH_ENABLED: u32 = 32;
pub const ACPI_NFIT_MEM_MAP_FAILED: u32 = 64;
pub const ACPI_NFIT_CONTROL_BUFFERED: u32 = 1;
pub const ACPI_NFIT_CONTROL_MFG_INFO_VALID: u32 = 1;
pub const ACPI_NFIT_CAPABILITY_CACHE_FLUSH: u32 = 1;
pub const ACPI_NFIT_CAPABILITY_MEM_FLUSH: u32 = 2;
pub const ACPI_NFIT_CAPABILITY_MEM_MIRRORING: u32 = 4;
pub const ACPI_NFIT_DIMM_NUMBER_MASK: u32 = 15;
pub const ACPI_NFIT_CHANNEL_NUMBER_MASK: u32 = 240;
pub const ACPI_NFIT_MEMORY_ID_MASK: u32 = 3840;
pub const ACPI_NFIT_SOCKET_ID_MASK: u32 = 61440;
pub const ACPI_NFIT_NODE_ID_MASK: u32 = 268369920;
pub const ACPI_NFIT_DIMM_NUMBER_OFFSET: u32 = 0;
pub const ACPI_NFIT_CHANNEL_NUMBER_OFFSET: u32 = 4;
pub const ACPI_NFIT_MEMORY_ID_OFFSET: u32 = 8;
pub const ACPI_NFIT_SOCKET_ID_OFFSET: u32 = 12;
pub const ACPI_NFIT_NODE_ID_OFFSET: u32 = 16;
pub const ACPI_PCCT_DOORBELL: u32 = 1;
pub const ACPI_PCCT_INTERRUPT_POLARITY: u32 = 1;
pub const ACPI_PCCT_INTERRUPT_MODE: u32 = 2;
pub const ACPI_PDTT_RUNTIME_TRIGGER: u32 = 1;
pub const ACPI_PDTT_WAIT_COMPLETION: u32 = 2;
pub const ACPI_PDTT_TRIGGER_ORDER: u32 = 4;
pub const ACPI_PMTT_TYPE_SOCKET: u32 = 0;
pub const ACPI_PMTT_TYPE_CONTROLLER: u32 = 1;
pub const ACPI_PMTT_TYPE_DIMM: u32 = 2;
pub const ACPI_PMTT_TYPE_RESERVED: u32 = 3;
pub const ACPI_PMTT_TOP_LEVEL: u32 = 1;
pub const ACPI_PMTT_PHYSICAL: u32 = 2;
pub const ACPI_PMTT_MEMORY_TYPE: u32 = 12;
pub const ACPI_PPTT_PHYSICAL_PACKAGE: u32 = 1;
pub const ACPI_PPTT_ACPI_PROCESSOR_ID_VALID: u32 = 2;
pub const ACPI_PPTT_ACPI_PROCESSOR_IS_THREAD: u32 = 4;
pub const ACPI_PPTT_ACPI_LEAF_NODE: u32 = 8;
pub const ACPI_PPTT_ACPI_IDENTICAL: u32 = 16;
pub const ACPI_PPTT_SIZE_PROPERTY_VALID: u32 = 1;
pub const ACPI_PPTT_NUMBER_OF_SETS_VALID: u32 = 2;
pub const ACPI_PPTT_ASSOCIATIVITY_VALID: u32 = 4;
pub const ACPI_PPTT_ALLOCATION_TYPE_VALID: u32 = 8;
pub const ACPI_PPTT_CACHE_TYPE_VALID: u32 = 16;
pub const ACPI_PPTT_WRITE_POLICY_VALID: u32 = 32;
pub const ACPI_PPTT_LINE_SIZE_VALID: u32 = 64;
pub const ACPI_PPTT_MASK_ALLOCATION_TYPE: u32 = 3;
pub const ACPI_PPTT_MASK_CACHE_TYPE: u32 = 12;
pub const ACPI_PPTT_MASK_WRITE_POLICY: u32 = 16;
pub const ACPI_PPTT_CACHE_READ_ALLOCATE: u32 = 0;
pub const ACPI_PPTT_CACHE_WRITE_ALLOCATE: u32 = 1;
pub const ACPI_PPTT_CACHE_RW_ALLOCATE: u32 = 2;
pub const ACPI_PPTT_CACHE_RW_ALLOCATE_ALT: u32 = 3;
pub const ACPI_PPTT_CACHE_TYPE_DATA: u32 = 0;
pub const ACPI_PPTT_CACHE_TYPE_INSTR: u32 = 4;
pub const ACPI_PPTT_CACHE_TYPE_UNIFIED: u32 = 8;
pub const ACPI_PPTT_CACHE_TYPE_UNIFIED_ALT: u32 = 12;
pub const ACPI_PPTT_CACHE_POLICY_WB: u32 = 0;
pub const ACPI_PPTT_CACHE_POLICY_WT: u32 = 16;
pub const ACPI_RASF_SCRUBBER_RUNNING: u32 = 1;
pub const ACPI_RASF_SPEED: u32 = 14;
pub const ACPI_RASF_SPEED_SLOW: u32 = 0;
pub const ACPI_RASF_SPEED_MEDIUM: u32 = 8;
pub const ACPI_RASF_SPEED_FAST: u32 = 14;
pub const ACPI_RASF_GENERATE_SCI: u32 = 32768;
pub const ACPI_RASF_COMMAND_COMPLETE: u32 = 1;
pub const ACPI_RASF_SCI_DOORBELL: u32 = 2;
pub const ACPI_RASF_ERROR: u32 = 4;
pub const ACPI_RASF_STATUS: u32 = 248;
pub const ACPI_SDEV_HANDOFF_TO_UNSECURE_OS: u32 = 1;
pub const ACPI_SIG_SLIC: &'static [u8; 5usize] = b"SLIC\0";
pub const ACPI_SIG_SLIT: &'static [u8; 5usize] = b"SLIT\0";
pub const ACPI_SIG_SPCR: &'static [u8; 5usize] = b"SPCR\0";
pub const ACPI_SIG_SPMI: &'static [u8; 5usize] = b"SPMI\0";
pub const ACPI_SIG_SRAT: &'static [u8; 5usize] = b"SRAT\0";
pub const ACPI_SIG_STAO: &'static [u8; 5usize] = b"STAO\0";
pub const ACPI_SIG_TCPA: &'static [u8; 5usize] = b"TCPA\0";
pub const ACPI_SIG_TPM2: &'static [u8; 5usize] = b"TPM2\0";
pub const ACPI_SIG_UEFI: &'static [u8; 5usize] = b"UEFI\0";
pub const ACPI_SIG_VRTC: &'static [u8; 5usize] = b"VRTC\0";
pub const ACPI_SIG_WAET: &'static [u8; 5usize] = b"WAET\0";
pub const ACPI_SIG_WDAT: &'static [u8; 5usize] = b"WDAT\0";
pub const ACPI_SIG_WDDT: &'static [u8; 5usize] = b"WDDT\0";
pub const ACPI_SIG_WDRT: &'static [u8; 5usize] = b"WDRT\0";
pub const ACPI_SIG_WPBT: &'static [u8; 5usize] = b"WPBT\0";
pub const ACPI_SIG_WSMT: &'static [u8; 5usize] = b"WSMT\0";
pub const ACPI_SIG_XENV: &'static [u8; 5usize] = b"XENV\0";
pub const ACPI_SIG_XXXX: &'static [u8; 5usize] = b"XXXX\0";
pub const ACPI_SPCR_DO_NOT_DISABLE: u32 = 1;
pub const ACPI_SRAT_CPU_USE_AFFINITY: u32 = 1;
pub const ACPI_SRAT_MEM_ENABLED: u32 = 1;
pub const ACPI_SRAT_MEM_HOT_PLUGGABLE: u32 = 2;
pub const ACPI_SRAT_MEM_NON_VOLATILE: u32 = 4;
pub const ACPI_SRAT_CPU_ENABLED: u32 = 1;
pub const ACPI_SRAT_GICC_ENABLED: u32 = 1;
pub const ACPI_SRAT_GENERIC_AFFINITY_ENABLED: u32 = 1;
pub const ACPI_TCPA_CLIENT_TABLE: u32 = 0;
pub const ACPI_TCPA_SERVER_TABLE: u32 = 1;
pub const ACPI_TCPA_PCI_DEVICE: u32 = 1;
pub const ACPI_TCPA_BUS_PNP: u32 = 2;
pub const ACPI_TCPA_ADDRESS_VALID: u32 = 4;
pub const ACPI_TCPA_INTERRUPT_MODE: u32 = 1;
pub const ACPI_TCPA_INTERRUPT_POLARITY: u32 = 2;
pub const ACPI_TCPA_SCI_VIA_GPE: u32 = 4;
pub const ACPI_TCPA_GLOBAL_INTERRUPT: u32 = 8;
pub const ACPI_TPM23_ACPI_START_METHOD: u32 = 2;
pub const ACPI_TPM2_NOT_ALLOWED: u32 = 0;
pub const ACPI_TPM2_RESERVED1: u32 = 1;
pub const ACPI_TPM2_START_METHOD: u32 = 2;
pub const ACPI_TPM2_RESERVED3: u32 = 3;
pub const ACPI_TPM2_RESERVED4: u32 = 4;
pub const ACPI_TPM2_RESERVED5: u32 = 5;
pub const ACPI_TPM2_MEMORY_MAPPED: u32 = 6;
pub const ACPI_TPM2_COMMAND_BUFFER: u32 = 7;
pub const ACPI_TPM2_COMMAND_BUFFER_WITH_START_METHOD: u32 = 8;
pub const ACPI_TPM2_RESERVED9: u32 = 9;
pub const ACPI_TPM2_RESERVED10: u32 = 10;
pub const ACPI_TPM2_COMMAND_BUFFER_WITH_ARM_SMC: u32 = 11;
pub const ACPI_TPM2_RESERVED: u32 = 12;
pub const ACPI_TPM2_INTERRUPT_SUPPORT: u32 = 1;
pub const ACPI_TPM2_IDLE_SUPPORT: u32 = 1;
pub const ACPI_WAET_RTC_NO_ACK: u32 = 1;
pub const ACPI_WAET_TIMER_ONE_READ: u32 = 2;
pub const ACPI_WDAT_ENABLED: u32 = 1;
pub const ACPI_WDAT_STOPPED: u32 = 128;
pub const ACPI_WDDT_AVAILABLE: u32 = 1;
pub const ACPI_WDDT_ACTIVE: u32 = 2;
pub const ACPI_WDDT_TCO_OS_OWNED: u32 = 4;
pub const ACPI_WDDT_USER_RESET: u32 = 2048;
pub const ACPI_WDDT_WDT_RESET: u32 = 4096;
pub const ACPI_WDDT_POWER_FAIL: u32 = 8192;
pub const ACPI_WDDT_UNKNOWN_RESET: u32 = 16384;
pub const ACPI_WDDT_AUTO_RESET: u32 = 1;
pub const ACPI_WDDT_ALERT_SUPPORT: u32 = 2;
pub const ACPI_WSMT_FIXED_COMM_BUFFERS: u32 = 1;
pub const ACPI_WSMT_COMM_BUFFER_NESTED_PTR_PROTECTION: u32 = 2;
pub const ACPI_WSMT_SYSTEM_RESOURCE_PROTECTION: u32 = 4;
pub const ACPI_FADT_CONFORMANCE: &'static [u8; 26usize] = b"ACPI 6.1 (FADT version 6)\0";
pub const ACPI_UTILITIES: u32 = 1;
pub const ACPI_HARDWARE: u32 = 2;
pub const ACPI_EVENTS: u32 = 4;
pub const ACPI_TABLES: u32 = 8;
pub const ACPI_NAMESPACE: u32 = 16;
pub const ACPI_PARSER: u32 = 32;
pub const ACPI_DISPATCHER: u32 = 64;
pub const ACPI_EXECUTER: u32 = 128;
pub const ACPI_RESOURCES: u32 = 256;
pub const ACPI_CA_DEBUGGER: u32 = 512;
pub const ACPI_OS_SERVICES: u32 = 1024;
pub const ACPI_CA_DISASSEMBLER: u32 = 2048;
pub const ACPI_COMPILER: u32 = 4096;
pub const ACPI_TOOLS: u32 = 8192;
pub const ACPI_EXAMPLE: u32 = 16384;
pub const ACPI_DRIVER: u32 = 32768;
pub const ACPI_ALL_COMPONENTS: u32 = 131071;
pub const ACPI_COMPONENT_DEFAULT: u32 = 131071;
pub const ACPI_ALL_DRIVERS: u32 = 4294901760;
pub const ACPI_LV_INIT: u32 = 1;
pub const ACPI_LV_DEBUG_OBJECT: u32 = 2;
pub const ACPI_LV_INFO: u32 = 4;
pub const ACPI_LV_REPAIR: u32 = 8;
pub const ACPI_LV_TRACE_POINT: u32 = 16;
pub const ACPI_LV_ALL_EXCEPTIONS: u32 = 31;
pub const ACPI_LV_INIT_NAMES: u32 = 32;
pub const ACPI_LV_PARSE: u32 = 64;
pub const ACPI_LV_LOAD: u32 = 128;
pub const ACPI_LV_DISPATCH: u32 = 256;
pub const ACPI_LV_EXEC: u32 = 512;
pub const ACPI_LV_NAMES: u32 = 1024;
pub const ACPI_LV_OPREGION: u32 = 2048;
pub const ACPI_LV_BFIELD: u32 = 4096;
pub const ACPI_LV_TABLES: u32 = 8192;
pub const ACPI_LV_VALUES: u32 = 16384;
pub const ACPI_LV_OBJECTS: u32 = 32768;
pub const ACPI_LV_RESOURCES: u32 = 65536;
pub const ACPI_LV_USER_REQUESTS: u32 = 131072;
pub const ACPI_LV_PACKAGE: u32 = 262144;
pub const ACPI_LV_EVALUATION: u32 = 524288;
pub const ACPI_LV_VERBOSITY1: u32 = 1048415;
pub const ACPI_LV_ALLOCATIONS: u32 = 1048576;
pub const ACPI_LV_FUNCTIONS: u32 = 2097152;
pub const ACPI_LV_OPTIMIZATIONS: u32 = 4194304;
pub const ACPI_LV_PARSE_TREES: u32 = 8388608;
pub const ACPI_LV_VERBOSITY2: u32 = 16777055;
pub const ACPI_LV_ALL: u32 = 16777055;
pub const ACPI_LV_MUTEX: u32 = 16777216;
pub const ACPI_LV_THREADS: u32 = 33554432;
pub const ACPI_LV_IO: u32 = 67108864;
pub const ACPI_LV_INTERRUPTS: u32 = 134217728;
pub const ACPI_LV_VERBOSITY3: u32 = 268435295;
pub const ACPI_LV_AML_DISASSEMBLE: u32 = 268435456;
pub const ACPI_LV_VERBOSE_INFO: u32 = 536870912;
pub const ACPI_LV_FULL_TABLES: u32 = 1073741824;
pub const ACPI_LV_EVENTS: u32 = 2147483648;
pub const ACPI_LV_VERBOSE: u32 = 4026531840;
pub const ACPI_DEBUG_DEFAULT: u32 = 524299;
pub const ACPI_NORMAL_DEFAULT: u32 = 11;
pub const ACPI_DEBUG_ALL: u32 = 285212511;
pub const ACPI_TRACE_LEVEL_ALL: u32 = 16777055;
pub const ACPI_TRACE_LAYER_ALL: u32 = 511;
pub const ACPI_TRACE_LEVEL_DEFAULT: u32 = 16;
pub const ACPI_TRACE_LAYER_DEFAULT: u32 = 128;
pub const ACPI_DMA_WIDTH8: u32 = 0;
pub const ACPI_DMA_WIDTH16: u32 = 1;
pub const ACPI_DMA_WIDTH32: u32 = 2;
pub const ACPI_DMA_WIDTH64: u32 = 3;
pub const ACPI_DMA_WIDTH128: u32 = 4;
pub const ACPI_DMA_WIDTH256: u32 = 5;
pub const ACPI_RESOURCE_GPIO_TYPE_INT: u32 = 0;
pub const ACPI_RESOURCE_GPIO_TYPE_IO: u32 = 1;
pub const ACPI_PIN_CONFIG_DEFAULT: u32 = 0;
pub const ACPI_PIN_CONFIG_PULLUP: u32 = 1;
pub const ACPI_PIN_CONFIG_PULLDOWN: u32 = 2;
pub const ACPI_PIN_CONFIG_NOPULL: u32 = 3;
pub const ACPI_IO_RESTRICT_NONE: u32 = 0;
pub const ACPI_IO_RESTRICT_INPUT: u32 = 1;
pub const ACPI_IO_RESTRICT_OUTPUT: u32 = 2;
pub const ACPI_IO_RESTRICT_NONE_PRESERVE: u32 = 3;
pub const ACPI_RESOURCE_SERIAL_TYPE_I2C: u32 = 1;
pub const ACPI_RESOURCE_SERIAL_TYPE_SPI: u32 = 2;
pub const ACPI_RESOURCE_SERIAL_TYPE_UART: u32 = 3;
pub const ACPI_CONTROLLER_INITIATED: u32 = 0;
pub const ACPI_DEVICE_INITIATED: u32 = 1;
pub const ACPI_I2C_7BIT_MODE: u32 = 0;
pub const ACPI_I2C_10BIT_MODE: u32 = 1;
pub const ACPI_SPI_4WIRE_MODE: u32 = 0;
pub const ACPI_SPI_3WIRE_MODE: u32 = 1;
pub const ACPI_SPI_ACTIVE_LOW: u32 = 0;
pub const ACPI_SPI_ACTIVE_HIGH: u32 = 1;
pub const ACPI_SPI_FIRST_PHASE: u32 = 0;
pub const ACPI_SPI_SECOND_PHASE: u32 = 1;
pub const ACPI_SPI_START_LOW: u32 = 0;
pub const ACPI_SPI_START_HIGH: u32 = 1;
pub const ACPI_UART_LITTLE_ENDIAN: u32 = 0;
pub const ACPI_UART_BIG_ENDIAN: u32 = 1;
pub const ACPI_UART_5_DATA_BITS: u32 = 0;
pub const ACPI_UART_6_DATA_BITS: u32 = 1;
pub const ACPI_UART_7_DATA_BITS: u32 = 2;
pub const ACPI_UART_8_DATA_BITS: u32 = 3;
pub const ACPI_UART_9_DATA_BITS: u32 = 4;
pub const ACPI_UART_NO_STOP_BITS: u32 = 0;
pub const ACPI_UART_1_STOP_BIT: u32 = 1;
pub const ACPI_UART_1P5_STOP_BITS: u32 = 2;
pub const ACPI_UART_2_STOP_BITS: u32 = 3;
pub const ACPI_UART_FLOW_CONTROL_NONE: u32 = 0;
pub const ACPI_UART_FLOW_CONTROL_HW: u32 = 1;
pub const ACPI_UART_FLOW_CONTROL_XON_XOFF: u32 = 2;
pub const ACPI_UART_PARITY_NONE: u32 = 0;
pub const ACPI_UART_PARITY_EVEN: u32 = 1;
pub const ACPI_UART_PARITY_ODD: u32 = 2;
pub const ACPI_UART_PARITY_MARK: u32 = 3;
pub const ACPI_UART_PARITY_SPACE: u32 = 4;
pub const ACPI_UART_CARRIER_DETECT: u32 = 4;
pub const ACPI_UART_RING_INDICATOR: u32 = 8;
pub const ACPI_UART_DATA_SET_READY: u32 = 16;
pub const ACPI_UART_DATA_TERMINAL_READY: u32 = 32;
pub const ACPI_UART_CLEAR_TO_SEND: u32 = 64;
pub const ACPI_UART_REQUEST_TO_SEND: u32 = 128;
pub const ACPI_PIN_CONFIG_BIAS_PULL_UP: u32 = 1;
pub const ACPI_PIN_CONFIG_BIAS_PULL_DOWN: u32 = 2;
pub const ACPI_PIN_CONFIG_BIAS_DEFAULT: u32 = 3;
pub const ACPI_PIN_CONFIG_BIAS_DISABLE: u32 = 4;
pub const ACPI_PIN_CONFIG_BIAS_HIGH_IMPEDANCE: u32 = 5;
pub const ACPI_PIN_CONFIG_BIAS_BUS_HOLD: u32 = 6;
pub const ACPI_PIN_CONFIG_DRIVE_OPEN_DRAIN: u32 = 7;
pub const ACPI_PIN_CONFIG_DRIVE_OPEN_SOURCE: u32 = 8;
pub const ACPI_PIN_CONFIG_DRIVE_PUSH_PULL: u32 = 9;
pub const ACPI_PIN_CONFIG_DRIVE_STRENGTH: u32 = 10;
pub const ACPI_PIN_CONFIG_SLEW_RATE: u32 = 11;
pub const ACPI_PIN_CONFIG_INPUT_DEBOUNCE: u32 = 12;
pub const ACPI_PIN_CONFIG_INPUT_SCHMITT_TRIGGER: u32 = 13;
pub const ACPI_RESOURCE_TYPE_IRQ: u32 = 0;
pub const ACPI_RESOURCE_TYPE_DMA: u32 = 1;
pub const ACPI_RESOURCE_TYPE_START_DEPENDENT: u32 = 2;
pub const ACPI_RESOURCE_TYPE_END_DEPENDENT: u32 = 3;
pub const ACPI_RESOURCE_TYPE_IO: u32 = 4;
pub const ACPI_RESOURCE_TYPE_FIXED_IO: u32 = 5;
pub const ACPI_RESOURCE_TYPE_VENDOR: u32 = 6;
pub const ACPI_RESOURCE_TYPE_END_TAG: u32 = 7;
pub const ACPI_RESOURCE_TYPE_MEMORY24: u32 = 8;
pub const ACPI_RESOURCE_TYPE_MEMORY32: u32 = 9;
pub const ACPI_RESOURCE_TYPE_FIXED_MEMORY32: u32 = 10;
pub const ACPI_RESOURCE_TYPE_ADDRESS16: u32 = 11;
pub const ACPI_RESOURCE_TYPE_ADDRESS32: u32 = 12;
pub const ACPI_RESOURCE_TYPE_ADDRESS64: u32 = 13;
pub const ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64: u32 = 14;
pub const ACPI_RESOURCE_TYPE_EXTENDED_IRQ: u32 = 15;
pub const ACPI_RESOURCE_TYPE_GENERIC_REGISTER: u32 = 16;
pub const ACPI_RESOURCE_TYPE_GPIO: u32 = 17;
pub const ACPI_RESOURCE_TYPE_FIXED_DMA: u32 = 18;
pub const ACPI_RESOURCE_TYPE_SERIAL_BUS: u32 = 19;
pub const ACPI_RESOURCE_TYPE_PIN_FUNCTION: u32 = 20;
pub const ACPI_RESOURCE_TYPE_PIN_CONFIG: u32 = 21;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP: u32 = 22;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP_FUNCTION: u32 = 23;
pub const ACPI_RESOURCE_TYPE_PIN_GROUP_CONFIG: u32 = 24;
pub const ACPI_RESOURCE_TYPE_MAX: u32 = 24;
pub const ACPI_RS_SIZE_NO_DATA: u32 = 8;
pub const ACPI_MUTEX_SEM: u32 = 1;
pub const ACPI_SIGNAL_FATAL: u32 = 0;
pub const ACPI_SIGNAL_BREAKPOINT: u32 = 1;
pub const ACPI_CA_VERSION: u32 = 538968596;
pub const ACPI_OS_NAME: &'static [u8; 21usize] = b"Microsoft Windows NT\0";
pub const ACPI_MAX_STATE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_PARSE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_EXTPARSE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_OBJECT_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_NAMESPACE_CACHE_DEPTH: u32 = 96;
pub const ACPI_MAX_COMMENT_CACHE_DEPTH: u32 = 96;
pub const ACPI_CA_SUPPORT_LEVEL: u32 = 5;
pub const ACPI_MAX_SEMAPHORE_COUNT: u32 = 256;
pub const ACPI_MAX_REFERENCE_COUNT: u32 = 16384;
pub const ACPI_DEFAULT_PAGE_SIZE: u32 = 4096;
pub const ACPI_NUM_OWNERID_MASKS: u32 = 128;
pub const ACPI_ROOT_TABLE_SIZE_INCREMENT: u32 = 4;
pub const ACPI_MAX_SLEEP: u32 = 2000;
pub const ACPI_ADDRESS_RANGE_MAX: u32 = 2;
pub const ACPI_MAX_LOOP_TIMEOUT: u32 = 30;
pub const ACPI_METHOD_NUM_LOCALS: u32 = 8;
pub const ACPI_METHOD_MAX_LOCAL: u32 = 7;
pub const ACPI_METHOD_NUM_ARGS: u32 = 7;
pub const ACPI_METHOD_MAX_ARG: u32 = 6;
pub const ACPI_OBJ_NUM_OPERANDS: u32 = 8;
pub const ACPI_OBJ_MAX_OPERAND: u32 = 7;
pub const ACPI_RESULTS_FRAME_OBJ_NUM: u32 = 8;
pub const ACPI_RESULTS_OBJ_NUM_MAX: u32 = 255;
pub const ACPI_EBDA_PTR_LOCATION: u32 = 1038;
pub const ACPI_EBDA_PTR_LENGTH: u32 = 2;
pub const ACPI_EBDA_WINDOW_SIZE: u32 = 1024;
pub const ACPI_HI_RSDP_WINDOW_BASE: u32 = 917504;
pub const ACPI_HI_RSDP_WINDOW_SIZE: u32 = 131072;
pub const ACPI_RSDP_SCAN_STEP: u32 = 16;
pub const ACPI_USER_REGION_BEGIN: u32 = 128;
pub const ACPI_MAX_ADDRESS_SPACE: u32 = 255;
pub const ACPI_NUM_DEFAULT_SPACES: u32 = 4;
pub const ACPI_MAX_MATCH_OPCODE: u32 = 5;
pub const ACPI_RSDP_CHECKSUM_LENGTH: u32 = 20;
pub const ACPI_RSDP_XCHECKSUM_LENGTH: u32 = 36;
pub const ACPI_SERIAL_HEADER_SIZE: u32 = 2;
pub const ACPI_SMBUS_DATA_SIZE: u32 = 32;
pub const ACPI_SMBUS_BUFFER_SIZE: u32 = 34;
pub const ACPI_IPMI_DATA_SIZE: u32 = 64;
pub const ACPI_IPMI_BUFFER_SIZE: u32 = 66;
pub const ACPI_MAX_GSBUS_DATA_SIZE: u32 = 255;
pub const ACPI_MAX_GSBUS_BUFFER_SIZE: u32 = 257;
pub const ACPI_NUM_SxD_METHODS: u32 = 4;
pub const ACPI_NUM_SxW_METHODS: u32 = 5;
pub const ACPI_DEBUGGER_MAX_ARGS: u32 = 11;
pub const ACPI_DB_LINE_BUFFER_SIZE: u32 = 512;
pub const ACPI_DEBUGGER_COMMAND_PROMPT: u8 = 45u8;
pub const ACPI_DEBUGGER_EXECUTE_PROMPT: u8 = 37u8;
pub const ACPI_PLD_REV1_BUFFER_SIZE: u32 = 16;
pub const ACPI_PLD_REV2_BUFFER_SIZE: u32 = 20;
pub const ACPI_PLD_BUFFER_SIZE: u32 = 20;
pub type va_list = __builtin_va_list;
pub type __uint64_t = u32;
pub type BOOLEAN = bool;
pub type UINT8 = u8;
pub type UINT16 = u16;
pub type UINT64 = u64;
pub type UINT32 = u32;
pub type ACPI_SIZE = UINT64;
pub type ACPI_IO_ADDRESS = UINT64;
pub type ACPI_PHYSICAL_ADDRESS = UINT64;
pub type ACPI_STATUS = UINT32;
pub type ACPI_NAME = UINT32;
pub type ACPI_STRING = *mut i8;
pub type ACPI_HANDLE = *mut ::core::ffi::c_void;
pub type ACPI_OWNER_ID = UINT16;
pub type ACPI_OBJECT_TYPE = UINT32;
pub type ACPI_EVENT_STATUS = UINT32;
pub type ACPI_ADR_SPACE_TYPE = UINT8;
pub type ACPI_SLEEP_FUNCTION =
    ::core::option::Option<unsafe extern "C" fn(SleepState: UINT8) -> ACPI_STATUS>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sleep_functions {
    pub LegacyFunction: ACPI_SLEEP_FUNCTION,
    pub ExtendedFunction: ACPI_SLEEP_FUNCTION,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_object {
    pub Type: ACPI_OBJECT_TYPE,
    pub Integer: acpi_object__bindgen_ty_1,
    pub String: acpi_object__bindgen_ty_2,
    pub Buffer: acpi_object__bindgen_ty_3,
    pub Package: acpi_object__bindgen_ty_4,
    pub Reference: acpi_object__bindgen_ty_5,
    pub Processor: acpi_object__bindgen_ty_6,
    pub PowerResource: acpi_object__bindgen_ty_7,
    _bindgen_union_align: [u64; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_1 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Value: UINT64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_2 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_3 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Length: UINT32,
    pub Pointer: *mut UINT8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_4 {
    pub Type: ACPI_OBJECT_TYPE,
    pub Count: UINT32,
    pub Elements: *mut acpi_object,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_5 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ActualType: ACPI_OBJECT_TYPE,
    pub Handle: ACPI_HANDLE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_6 {
    pub Type: ACPI_OBJECT_TYPE,
    pub ProcId: UINT32,
    pub PblkAddress: ACPI_IO_ADDRESS,
    pub PblkLength: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object__bindgen_ty_7 {
    pub Type: ACPI_OBJECT_TYPE,
    pub SystemLevel: UINT32,
    pub ResourceOrder: UINT32,
}
pub type ACPI_OBJECT = acpi_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_object_list {
    pub Count: UINT32,
    pub Pointer: *mut ACPI_OBJECT,
}
pub type ACPI_OBJECT_LIST = acpi_object_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_buffer {
    pub Length: ACPI_SIZE,
    pub Pointer: *mut ::core::ffi::c_void,
}
pub type ACPI_BUFFER = acpi_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_predefined_names {
    pub Name: *const i8,
    pub Type: UINT8,
    pub Val: *mut i8,
}
pub type ACPI_PREDEFINED_NAMES = acpi_predefined_names;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_system_info {
    pub AcpiCaVersion: UINT32,
    pub Flags: UINT32,
    pub TimerResolution: UINT32,
    pub Reserved1: UINT32,
    pub Reserved2: UINT32,
    pub DebugLevel: UINT32,
    pub DebugLayer: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_statistics {
    pub SciCount: UINT32,
    pub GpeCount: UINT32,
    pub FixedEventCount: [UINT32; 5usize],
    pub MethodCount: UINT32,
}
pub type ACPI_STATISTICS = acpi_statistics;
pub type ACPI_OSD_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_OSD_EXEC_CALLBACK =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void)>;
pub type ACPI_SCI_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GBL_EVENT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        EventType: UINT32,
        Device: ACPI_HANDLE,
        EventNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ),
>;
pub type ACPI_EVENT_HANDLER =
    ::core::option::Option<unsafe extern "C" fn(Context: *mut ::core::ffi::c_void) -> UINT32>;
pub type ACPI_GPE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> UINT32,
>;
pub type ACPI_NOTIFY_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Device: ACPI_HANDLE, Value: UINT32, Context: *mut ::core::ffi::c_void),
>;
pub type ACPI_OBJECT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Data: *mut ::core::ffi::c_void),
>;
pub type ACPI_INIT_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(Object: ACPI_HANDLE, Function: UINT32) -> ACPI_STATUS,
>;
pub type ACPI_EXCEPTION_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        AmlStatus: ACPI_STATUS,
        Name: ACPI_NAME,
        Opcode: UINT16,
        AmlOffset: UINT32,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_TABLE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Event: UINT32,
        Table: *mut ::core::ffi::c_void,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_ADR_SPACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(
        Function: UINT32,
        Address: ACPI_PHYSICAL_ADDRESS,
        BitWidth: UINT32,
        Value: *mut UINT64,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_connection_info {
    pub Connection: *mut UINT8,
    pub Length: UINT16,
    pub AccessLength: UINT8,
}
pub type ACPI_ADR_SPACE_SETUP = ::core::option::Option<
    unsafe extern "C" fn(
        RegionHandle: ACPI_HANDLE,
        Function: UINT32,
        HandlerContext: *mut ::core::ffi::c_void,
        RegionContext: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_WALK_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Object: ACPI_HANDLE,
        NestingLevel: UINT32,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
pub type ACPI_INTERFACE_HANDLER = ::core::option::Option<
    unsafe extern "C" fn(InterfaceName: ACPI_STRING, Supported: UINT32) -> UINT32,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pnp_device_id {
    pub Length: UINT32,
    pub String: *mut i8,
}
pub type ACPI_PNP_DEVICE_ID = acpi_pnp_device_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pnp_device_id_list {
    pub Count: UINT32,
    pub ListSize: UINT32,
    pub Ids: [ACPI_PNP_DEVICE_ID; 1usize],
}
pub type ACPI_PNP_DEVICE_ID_LIST = acpi_pnp_device_id_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_device_info {
    pub InfoSize: UINT32,
    pub Name: UINT32,
    pub Type: ACPI_OBJECT_TYPE,
    pub ParamCount: UINT8,
    pub Valid: UINT16,
    pub Flags: UINT8,
    pub HighestDstates: [UINT8; 4usize],
    pub LowestDstates: [UINT8; 5usize],
    pub Address: UINT64,
    pub HardwareId: ACPI_PNP_DEVICE_ID,
    pub UniqueId: ACPI_PNP_DEVICE_ID,
    pub ClassCode: ACPI_PNP_DEVICE_ID,
    pub CompatibleIdList: ACPI_PNP_DEVICE_ID_LIST,
}
pub type ACPI_DEVICE_INFO = acpi_device_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pci_id {
    pub Segment: UINT16,
    pub Bus: UINT16,
    pub Device: UINT16,
    pub Function: UINT16,
}
pub type ACPI_PCI_ID = acpi_pci_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mem_space_context {
    pub Length: UINT32,
    pub Address: ACPI_PHYSICAL_ADDRESS,
    pub MappedPhysicalAddress: ACPI_PHYSICAL_ADDRESS,
    pub MappedLogicalAddress: *mut UINT8,
    pub MappedLength: ACPI_SIZE,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_list {
    pub ListName: *const i8,
    pub ListHead: *mut ::core::ffi::c_void,
    pub ObjectSize: UINT16,
    pub MaxDepth: UINT16,
    pub CurrentDepth: UINT16,
}
pub type ACPI_MEMORY_LIST = acpi_memory_list;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_METHOD: ACPI_TRACE_EVENT_TYPE = 0;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_OPCODE: ACPI_TRACE_EVENT_TYPE = 1;
pub const ACPI_TRACE_EVENT_TYPE_ACPI_TRACE_AML_REGION: ACPI_TRACE_EVENT_TYPE = 2;
pub type ACPI_TRACE_EVENT_TYPE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_exception_info {
    pub Name: *mut i8,
}
#[doc = " Master ACPI Table Header. This common header is used by all ACPI tables"]
#[doc = " except the RSDP and FACS."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_header {
    pub Signature: [i8; 4usize],
    pub Length: UINT32,
    pub Revision: UINT8,
    pub Checksum: UINT8,
    pub OemId: [i8; 6usize],
    pub OemTableId: [i8; 8usize],
    pub OemRevision: UINT32,
    pub AslCompilerId: [i8; 4usize],
    pub AslCompilerRevision: UINT32,
}
pub type ACPI_TABLE_HEADER = acpi_table_header;
#[doc = " GAS - Generic Address Structure (ACPI 2.0+)"]
#[doc = ""]
#[doc = " Note: Since this structure is used in the ACPI tables, it is byte aligned."]
#[doc = " If misaligned access is not supported by the hardware, accesses to the"]
#[doc = " 64-bit Address field must be performed with care."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_generic_address {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessWidth: UINT8,
    pub Address: UINT64,
}
pub type ACPI_GENERIC_ADDRESS = acpi_generic_address;
#[doc = " RSDP - Root System Description Pointer (Signature is \"RSD PTR \")"]
#[doc = "        Version 2"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rsdp {
    pub Signature: [i8; 8usize],
    pub Checksum: UINT8,
    pub OemId: [i8; 6usize],
    pub Revision: UINT8,
    pub RsdtPhysicalAddress: UINT32,
    pub Length: UINT32,
    pub XsdtPhysicalAddress: UINT64,
    pub ExtendedChecksum: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rsdp_common {
    pub Signature: [i8; 8usize],
    pub Checksum: UINT8,
    pub OemId: [i8; 6usize],
    pub Revision: UINT8,
    pub RsdtPhysicalAddress: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rsdp_extension {
    pub Length: UINT32,
    pub XsdtPhysicalAddress: UINT64,
    pub ExtendedChecksum: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[doc = " RSDT/XSDT - Root System Description Tables"]
#[doc = "             Version 1 (both)"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rsdt {
    pub Header: ACPI_TABLE_HEADER,
    pub TableOffsetEntry: [UINT32; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_xsdt {
    pub Header: ACPI_TABLE_HEADER,
    pub TableOffsetEntry: [UINT64; 1usize],
}
#[doc = " FACS - Firmware ACPI Control Structure (FACS)"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_facs {
    pub Signature: [i8; 4usize],
    pub Length: UINT32,
    pub HardwareSignature: UINT32,
    pub FirmwareWakingVector: UINT32,
    pub GlobalLock: UINT32,
    pub Flags: UINT32,
    pub XFirmwareWakingVector: UINT64,
    pub Version: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub OspmFlags: UINT32,
    pub Reserved1: [UINT8; 24usize],
}
#[doc = " FADT - Fixed ACPI Description Table (Signature \"FACP\")"]
#[doc = "        Version 6"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_fadt {
    pub Header: ACPI_TABLE_HEADER,
    pub Facs: UINT32,
    pub Dsdt: UINT32,
    pub Model: UINT8,
    pub PreferredProfile: UINT8,
    pub SciInterrupt: UINT16,
    pub SmiCommand: UINT32,
    pub AcpiEnable: UINT8,
    pub AcpiDisable: UINT8,
    pub S4BiosRequest: UINT8,
    pub PstateControl: UINT8,
    pub Pm1aEventBlock: UINT32,
    pub Pm1bEventBlock: UINT32,
    pub Pm1aControlBlock: UINT32,
    pub Pm1bControlBlock: UINT32,
    pub Pm2ControlBlock: UINT32,
    pub PmTimerBlock: UINT32,
    pub Gpe0Block: UINT32,
    pub Gpe1Block: UINT32,
    pub Pm1EventLength: UINT8,
    pub Pm1ControlLength: UINT8,
    pub Pm2ControlLength: UINT8,
    pub PmTimerLength: UINT8,
    pub Gpe0BlockLength: UINT8,
    pub Gpe1BlockLength: UINT8,
    pub Gpe1Base: UINT8,
    pub CstControl: UINT8,
    pub C2Latency: UINT16,
    pub C3Latency: UINT16,
    pub FlushSize: UINT16,
    pub FlushStride: UINT16,
    pub DutyOffset: UINT8,
    pub DutyWidth: UINT8,
    pub DayAlarm: UINT8,
    pub MonthAlarm: UINT8,
    pub Century: UINT8,
    pub BootFlags: UINT16,
    pub Reserved: UINT8,
    pub Flags: UINT32,
    pub ResetRegister: ACPI_GENERIC_ADDRESS,
    pub ResetValue: UINT8,
    pub ArmBootFlags: UINT16,
    pub MinorRevision: UINT8,
    pub XFacs: UINT64,
    pub XDsdt: UINT64,
    pub XPm1aEventBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1bEventBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1aControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPm1bControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPm2ControlBlock: ACPI_GENERIC_ADDRESS,
    pub XPmTimerBlock: ACPI_GENERIC_ADDRESS,
    pub XGpe0Block: ACPI_GENERIC_ADDRESS,
    pub XGpe1Block: ACPI_GENERIC_ADDRESS,
    pub SleepControl: ACPI_GENERIC_ADDRESS,
    pub SleepStatus: ACPI_GENERIC_ADDRESS,
    pub HypervisorId: UINT64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_name_union {
    pub Integer: UINT32,
    pub Ascii: [i8; 4usize],
    _bindgen_union_align: u32,
}
pub type ACPI_NAME_UNION = acpi_name_union;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_table_desc {
    pub Address: ACPI_PHYSICAL_ADDRESS,
    pub Pointer: *mut ACPI_TABLE_HEADER,
    pub Length: UINT32,
    pub Signature: ACPI_NAME_UNION,
    pub OwnerId: ACPI_OWNER_ID,
    pub Flags: UINT8,
    pub ValidationCount: UINT16,
}
pub type ACPI_TABLE_DESC = acpi_table_desc;
#[doc = " Common subtable headers"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_subtable_header {
    pub Type: UINT8,
    pub Length: UINT8,
}
pub type ACPI_SUBTABLE_HEADER = acpi_subtable_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_whea_header {
    pub Action: UINT8,
    pub Instruction: UINT8,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub RegisterRegion: ACPI_GENERIC_ADDRESS,
    pub Value: UINT64,
    pub Mask: UINT64,
}
pub type ACPI_WHEA_HEADER = acpi_whea_header;
#[doc = " ASF - Alert Standard Format table (Signature \"ASF!\")"]
#[doc = "       Revision 0x10"]
#[doc = ""]
#[doc = " Conforms to the Alert Standard Format Specification V2.0, 23 April 2003"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_asf {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_header {
    pub Type: UINT8,
    pub Reserved: UINT8,
    pub Length: UINT16,
}
pub type ACPI_ASF_HEADER = acpi_asf_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_info {
    pub Header: ACPI_ASF_HEADER,
    pub MinResetValue: UINT8,
    pub MinPollInterval: UINT8,
    pub SystemId: UINT16,
    pub MfgId: UINT32,
    pub Flags: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_alert {
    pub Header: ACPI_ASF_HEADER,
    pub AssertMask: UINT8,
    pub DeassertMask: UINT8,
    pub Alerts: UINT8,
    pub DataLength: UINT8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_alert_data {
    pub Address: UINT8,
    pub Command: UINT8,
    pub Mask: UINT8,
    pub Value: UINT8,
    pub SensorType: UINT8,
    pub Type: UINT8,
    pub Offset: UINT8,
    pub SourceType: UINT8,
    pub Severity: UINT8,
    pub SensorNumber: UINT8,
    pub Entity: UINT8,
    pub Instance: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_remote {
    pub Header: ACPI_ASF_HEADER,
    pub Controls: UINT8,
    pub DataLength: UINT8,
    pub Reserved2: UINT16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_control_data {
    pub Function: UINT8,
    pub Address: UINT8,
    pub Command: UINT8,
    pub Value: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_rmcp {
    pub Header: ACPI_ASF_HEADER,
    pub Capabilities: [UINT8; 7usize],
    pub CompletionCode: UINT8,
    pub EnterpriseId: UINT32,
    pub Command: UINT8,
    pub Parameter: UINT16,
    pub BootOptions: UINT16,
    pub OemParameters: UINT16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_asf_address {
    pub Header: ACPI_ASF_HEADER,
    pub EpromAddress: UINT8,
    pub Devices: UINT8,
}
#[doc = " BERT - Boot Error Record Table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_bert {
    pub Header: ACPI_TABLE_HEADER,
    pub RegionLength: UINT32,
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_bert_region {
    pub BlockStatus: UINT32,
    pub RawDataOffset: UINT32,
    pub RawDataLength: UINT32,
    pub DataLength: UINT32,
    pub ErrorSeverity: UINT32,
}
#[doc = " BGRT - Boot Graphics Resource Table (ACPI 5.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_bgrt {
    pub Header: ACPI_TABLE_HEADER,
    pub Version: UINT16,
    pub Status: UINT8,
    pub ImageType: UINT8,
    pub ImageAddress: UINT64,
    pub ImageOffsetX: UINT32,
    pub ImageOffsetY: UINT32,
}
#[doc = " BOOT - Simple Boot Flag Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to the \"Simple Boot Flag Specification\", Version 2.1"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_boot {
    pub Header: ACPI_TABLE_HEADER,
    pub CmosIndex: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[doc = " CPEP - Corrected Platform Error Polling table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_cpep {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_cpep_polling {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub Interval: UINT32,
}
#[doc = " CSRT - Core System Resource Table"]
#[doc = "        Version 0"]
#[doc = ""]
#[doc = " Conforms to the \"Core System Resource Table (CSRT)\", November 14, 2011"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_csrt {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_group {
    pub Length: UINT32,
    pub VendorId: UINT32,
    pub SubvendorId: UINT32,
    pub DeviceId: UINT16,
    pub SubdeviceId: UINT16,
    pub Revision: UINT16,
    pub Reserved: UINT16,
    pub SharedInfoLength: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_shared_info {
    pub MajorVersion: UINT16,
    pub MinorVersion: UINT16,
    pub MmioBaseLow: UINT32,
    pub MmioBaseHigh: UINT32,
    pub GsiInterrupt: UINT32,
    pub InterruptPolarity: UINT8,
    pub InterruptMode: UINT8,
    pub NumChannels: UINT8,
    pub DmaAddressWidth: UINT8,
    pub BaseRequestLine: UINT16,
    pub NumHandshakeSignals: UINT16,
    pub MaxBlockSize: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_csrt_descriptor {
    pub Length: UINT32,
    pub Type: UINT16,
    pub Subtype: UINT16,
    pub Uid: UINT32,
}
#[doc = " DBG2 - Debug Port Table 2"]
#[doc = "        Version 0 (Both main table and subtables)"]
#[doc = ""]
#[doc = " Conforms to \"Microsoft Debug Port Table 2 (DBG2)\", December 10, 2015"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dbg2 {
    pub Header: ACPI_TABLE_HEADER,
    pub InfoOffset: UINT32,
    pub InfoCount: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dbg2_header {
    pub InfoOffset: UINT32,
    pub InfoCount: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dbg2_device {
    pub Revision: UINT8,
    pub Length: UINT16,
    pub RegisterCount: UINT8,
    pub NamepathLength: UINT16,
    pub NamepathOffset: UINT16,
    pub OemDataLength: UINT16,
    pub OemDataOffset: UINT16,
    pub PortType: UINT16,
    pub PortSubtype: UINT16,
    pub Reserved: UINT16,
    pub BaseAddressOffset: UINT16,
    pub AddressSizeOffset: UINT16,
}
#[doc = " DBGP - Debug Port table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to the \"Debug Port Specification\", Version 1.00, 2/9/2000"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dbgp {
    pub Header: ACPI_TABLE_HEADER,
    pub Type: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub DebugPort: ACPI_GENERIC_ADDRESS,
}
#[doc = " DMAR - DMA Remapping table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Intel Virtualization Technology for Directed I/O\","]
#[doc = " Version 2.3, October 2014"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_dmar {
    pub Header: ACPI_TABLE_HEADER,
    pub Width: UINT8,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 10usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_header {
    pub Type: UINT16,
    pub Length: UINT16,
}
pub type ACPI_DMAR_HEADER = acpi_dmar_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_device_scope {
    pub EntryType: UINT8,
    pub Length: UINT8,
    pub Reserved: UINT16,
    pub EnumerationId: UINT8,
    pub Bus: UINT8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_pci_path {
    pub Device: UINT8,
    pub Function: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_hardware_unit {
    pub Header: ACPI_DMAR_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub Segment: UINT16,
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_reserved_memory {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: UINT16,
    pub Segment: UINT16,
    pub BaseAddress: UINT64,
    pub EndAddress: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_atsr {
    pub Header: ACPI_DMAR_HEADER,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub Segment: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_rhsa {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: UINT32,
    pub BaseAddress: UINT64,
    pub ProximityDomain: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_dmar_andd {
    pub Header: ACPI_DMAR_HEADER,
    pub Reserved: [UINT8; 3usize],
    pub DeviceNumber: UINT8,
    pub DeviceName: [i8; 1usize],
}
#[doc = " DRTM - Dynamic Root of Trust for Measurement table"]
#[doc = " Conforms to \"TCG D-RTM Architecture\" June 17 2013, Version 1.0.0"]
#[doc = " Table version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_drtm {
    pub Header: ACPI_TABLE_HEADER,
    pub EntryBaseAddress: UINT64,
    pub EntryLength: UINT64,
    pub EntryAddress32: UINT32,
    pub EntryAddress64: UINT64,
    pub ExitAddress: UINT64,
    pub LogAreaAddress: UINT64,
    pub LogAreaLength: UINT32,
    pub ArchDependentAddress: UINT64,
    pub Flags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_vtable_list {
    pub ValidatedTableCount: UINT32,
    pub ValidatedTables: [UINT64; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_resource {
    pub Size: [UINT8; 7usize],
    pub Type: UINT8,
    pub Address: UINT64,
}
pub type ACPI_DRTM_RESOURCE = acpi_drtm_resource;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_resource_list {
    pub ResourceCount: UINT32,
    pub Resources: [ACPI_DRTM_RESOURCE; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_drtm_dps_id {
    pub DpsIdLength: UINT32,
    pub DpsId: [UINT8; 16usize],
}
#[doc = " ECDT - Embedded Controller Boot Resources Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ecdt {
    pub Header: ACPI_TABLE_HEADER,
    pub Control: ACPI_GENERIC_ADDRESS,
    pub Data: ACPI_GENERIC_ADDRESS,
    pub Uid: UINT32,
    pub Gpe: UINT8,
    pub Id: [UINT8; 1usize],
}
#[doc = " EINJ - Error Injection Table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_einj {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub Flags: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub Entries: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_entry {
    pub WheaHeader: ACPI_WHEA_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_error_type_with_addr {
    pub ErrorType: UINT32,
    pub VendorStructOffset: UINT32,
    pub Flags: UINT32,
    pub ApicId: UINT32,
    pub Address: UINT64,
    pub Range: UINT64,
    pub PcieId: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_vendor {
    pub Length: UINT32,
    pub PcieId: UINT32,
    pub VendorId: UINT16,
    pub DeviceId: UINT16,
    pub RevisionId: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_einj_trigger {
    pub HeaderSize: UINT32,
    pub Revision: UINT32,
    pub TableSize: UINT32,
    pub EntryCount: UINT32,
}
#[doc = " ERST - Error Record Serialization Table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_erst {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub Reserved: UINT32,
    pub Entries: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_erst_entry {
    pub WheaHeader: ACPI_WHEA_HEADER,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_erst_info {
    pub Signature: UINT16,
    pub Data: [UINT8; 48usize],
}
#[doc = " FPDT - Firmware Performance Data Table (ACPI 5.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_fpdt {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_header {
    pub Type: UINT16,
    pub Length: UINT8,
    pub Revision: UINT8,
}
pub type ACPI_FPDT_HEADER = acpi_fpdt_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_boot_pointer {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_s3pt_pointer {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_s3pt {
    pub Signature: [UINT8; 4usize],
    pub Length: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_s3pt_resume {
    pub Header: ACPI_FPDT_HEADER,
    pub ResumeCount: UINT32,
    pub FullResume: UINT64,
    pub AverageResume: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_s3pt_suspend {
    pub Header: ACPI_FPDT_HEADER,
    pub SuspendStart: UINT64,
    pub SuspendEnd: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fpdt_boot {
    pub Header: ACPI_FPDT_HEADER,
    pub Reserved: [UINT8; 4usize],
    pub ResetEnd: UINT64,
    pub LoadStart: UINT64,
    pub StartupStart: UINT64,
    pub ExitServicesEntry: UINT64,
    pub ExitServicesExit: UINT64,
}
#[doc = " GTDT - Generic Timer Description Table (ACPI 5.1)"]
#[doc = "        Version 2"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_gtdt {
    pub Header: ACPI_TABLE_HEADER,
    pub CounterBlockAddresss: UINT64,
    pub Reserved: UINT32,
    pub SecureEl1Interrupt: UINT32,
    pub SecureEl1Flags: UINT32,
    pub NonSecureEl1Interrupt: UINT32,
    pub NonSecureEl1Flags: UINT32,
    pub VirtualTimerInterrupt: UINT32,
    pub VirtualTimerFlags: UINT32,
    pub NonSecureEl2Interrupt: UINT32,
    pub NonSecureEl2Flags: UINT32,
    pub CounterReadBlockAddress: UINT64,
    pub PlatformTimerCount: UINT32,
    pub PlatformTimerOffset: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_el2 {
    pub VirtualEL2TimerGsiv: UINT32,
    pub VirtualEL2TimerFlags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_header {
    pub Type: UINT8,
    pub Length: UINT16,
}
pub type ACPI_GTDT_HEADER = acpi_gtdt_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_timer_block {
    pub Header: ACPI_GTDT_HEADER,
    pub Reserved: UINT8,
    pub BlockAddress: UINT64,
    pub TimerCount: UINT32,
    pub TimerOffset: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_timer_entry {
    pub FrameNumber: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub BaseAddress: UINT64,
    pub El0BaseAddress: UINT64,
    pub TimerInterrupt: UINT32,
    pub TimerFlags: UINT32,
    pub VirtualTimerInterrupt: UINT32,
    pub VirtualTimerFlags: UINT32,
    pub CommonFlags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtdt_watchdog {
    pub Header: ACPI_GTDT_HEADER,
    pub Reserved: UINT8,
    pub RefreshFrameAddress: UINT64,
    pub ControlFrameAddress: UINT64,
    pub TimerInterrupt: UINT32,
    pub TimerFlags: UINT32,
}
#[doc = " HEST - Hardware Error Source Table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hest {
    pub Header: ACPI_TABLE_HEADER,
    pub ErrorSourceCount: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_header {
    pub Type: UINT16,
    pub SourceId: UINT16,
}
pub type ACPI_HEST_HEADER = acpi_hest_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_error_bank {
    pub BankNumber: UINT8,
    pub ClearStatusOnInit: UINT8,
    pub StatusFormat: UINT8,
    pub Reserved: UINT8,
    pub ControlRegister: UINT32,
    pub ControlData: UINT64,
    pub StatusRegister: UINT32,
    pub AddressRegister: UINT32,
    pub MiscRegister: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_common {
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Bus: UINT32,
    pub Device: UINT16,
    pub Function: UINT16,
    pub DeviceControl: UINT16,
    pub Reserved2: UINT16,
    pub UncorrectableMask: UINT32,
    pub UncorrectableSeverity: UINT32,
    pub CorrectableMask: UINT32,
    pub AdvancedCapabilities: UINT32,
}
pub type ACPI_HEST_AER_COMMON = acpi_hest_aer_common;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_notify {
    pub Type: UINT8,
    pub Length: UINT8,
    pub ConfigWriteEnable: UINT16,
    pub PollInterval: UINT32,
    pub Vector: UINT32,
    pub PollingThresholdValue: UINT32,
    pub PollingThresholdWindow: UINT32,
    pub ErrorThresholdValue: UINT32,
    pub ErrorThresholdWindow: UINT32,
}
pub type ACPI_HEST_NOTIFY = acpi_hest_notify;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_machine_check {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub GlobalCapabilityData: UINT64,
    pub GlobalControlData: UINT64,
    pub NumHardwareBanks: UINT8,
    pub Reserved3: [UINT8; 7usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_corrected {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Notify: ACPI_HEST_NOTIFY,
    pub NumHardwareBanks: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_nmi {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved: UINT32,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_root {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
    pub RootErrorCommand: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_aer_bridge {
    pub Header: ACPI_HEST_HEADER,
    pub Aer: ACPI_HEST_AER_COMMON,
    pub UncorrectableMask2: UINT32,
    pub UncorrectableSeverity2: UINT32,
    pub AdvancedCapabilities2: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic {
    pub Header: ACPI_HEST_HEADER,
    pub RelatedSourceId: UINT16,
    pub Reserved: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
    pub ErrorStatusAddress: ACPI_GENERIC_ADDRESS,
    pub Notify: ACPI_HEST_NOTIFY,
    pub ErrorBlockLength: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_v2 {
    pub Header: ACPI_HEST_HEADER,
    pub RelatedSourceId: UINT16,
    pub Reserved: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub MaxRawDataLength: UINT32,
    pub ErrorStatusAddress: ACPI_GENERIC_ADDRESS,
    pub Notify: ACPI_HEST_NOTIFY,
    pub ErrorBlockLength: UINT32,
    pub ReadAckRegister: ACPI_GENERIC_ADDRESS,
    pub ReadAckPreserve: UINT64,
    pub ReadAckWrite: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_status {
    pub BlockStatus: UINT32,
    pub RawDataOffset: UINT32,
    pub RawDataLength: UINT32,
    pub DataLength: UINT32,
    pub ErrorSeverity: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_data {
    pub SectionType: [UINT8; 16usize],
    pub ErrorSeverity: UINT32,
    pub Revision: UINT16,
    pub ValidationBits: UINT8,
    pub Flags: UINT8,
    pub ErrorDataLength: UINT32,
    pub FruId: [UINT8; 16usize],
    pub FruText: [UINT8; 20usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_generic_data_v300 {
    pub SectionType: [UINT8; 16usize],
    pub ErrorSeverity: UINT32,
    pub Revision: UINT16,
    pub ValidationBits: UINT8,
    pub Flags: UINT8,
    pub ErrorDataLength: UINT32,
    pub FruId: [UINT8; 16usize],
    pub FruText: [UINT8; 20usize],
    pub TimeStamp: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hest_ia_deferred_check {
    pub Header: ACPI_HEST_HEADER,
    pub Reserved1: UINT16,
    pub Flags: UINT8,
    pub Enabled: UINT8,
    pub RecordsToPreallocate: UINT32,
    pub MaxSectionsPerRecord: UINT32,
    pub Notify: ACPI_HEST_NOTIFY,
    pub NumHardwareBanks: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[doc = " HMAT - Heterogeneous Memory Attributes Table (ACPI 6.2)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hmat {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_structure {
    pub Type: UINT16,
    pub Reserved: UINT16,
    pub Length: UINT32,
}
pub type ACPI_HMAT_STRUCTURE = acpi_hmat_structure;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_proximity_domain {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub Flags: UINT16,
    pub Reserved1: UINT16,
    pub ProcessorPD: UINT32,
    pub MemoryPD: UINT32,
    pub Reserved2: UINT32,
    pub Reserved3: UINT64,
    pub Reserved4: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_locality {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub Flags: UINT8,
    pub DataType: UINT8,
    pub Reserved1: UINT16,
    pub NumberOfInitiatorPDs: UINT32,
    pub NumberOfTargetPDs: UINT32,
    pub Reserved2: UINT32,
    pub EntryBaseUnit: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_hmat_cache {
    pub Header: ACPI_HMAT_STRUCTURE,
    pub MemoryPD: UINT32,
    pub Reserved1: UINT32,
    pub CacheSize: UINT64,
    pub CacheAttributes: UINT32,
    pub Reserved2: UINT16,
    pub NumberOfSMBIOSHandles: UINT16,
}
#[doc = " HPET - High Precision Event Timer table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"IA-PC HPET (High Precision Event Timers) Specification\","]
#[doc = " Version 1.0a, October 2004"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_hpet {
    pub Header: ACPI_TABLE_HEADER,
    pub Id: UINT32,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub Sequence: UINT8,
    pub MinimumTick: UINT16,
    pub Flags: UINT8,
}
#[doc = " IBFT - Boot Firmware Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"iSCSI Boot Firmware Table (iBFT) as Defined in ACPI 3.0b"]
#[doc = " Specification\", Version 1.01, March 1, 2007"]
#[doc = ""]
#[doc = " Note: It appears that this table is not intended to appear in the RSDT/XSDT."]
#[doc = " Therefore, it is not currently supported by the disassembler."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ibft {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: [UINT8; 12usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_header {
    pub Type: UINT8,
    pub Version: UINT8,
    pub Length: UINT16,
    pub Index: UINT8,
    pub Flags: UINT8,
}
pub type ACPI_IBFT_HEADER = acpi_ibft_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_control {
    pub Header: ACPI_IBFT_HEADER,
    pub Extensions: UINT16,
    pub InitiatorOffset: UINT16,
    pub Nic0Offset: UINT16,
    pub Target0Offset: UINT16,
    pub Nic1Offset: UINT16,
    pub Target1Offset: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_initiator {
    pub Header: ACPI_IBFT_HEADER,
    pub SnsServer: [UINT8; 16usize],
    pub SlpServer: [UINT8; 16usize],
    pub PrimaryServer: [UINT8; 16usize],
    pub SecondaryServer: [UINT8; 16usize],
    pub NameLength: UINT16,
    pub NameOffset: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_nic {
    pub Header: ACPI_IBFT_HEADER,
    pub IpAddress: [UINT8; 16usize],
    pub SubnetMaskPrefix: UINT8,
    pub Origin: UINT8,
    pub Gateway: [UINT8; 16usize],
    pub PrimaryDns: [UINT8; 16usize],
    pub SecondaryDns: [UINT8; 16usize],
    pub Dhcp: [UINT8; 16usize],
    pub Vlan: UINT16,
    pub MacAddress: [UINT8; 6usize],
    pub PciAddress: UINT16,
    pub NameLength: UINT16,
    pub NameOffset: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ibft_target {
    pub Header: ACPI_IBFT_HEADER,
    pub TargetIpAddress: [UINT8; 16usize],
    pub TargetIpSocket: UINT16,
    pub TargetBootLun: [UINT8; 8usize],
    pub ChapType: UINT8,
    pub NicAssociation: UINT8,
    pub TargetNameLength: UINT16,
    pub TargetNameOffset: UINT16,
    pub ChapNameLength: UINT16,
    pub ChapNameOffset: UINT16,
    pub ChapSecretLength: UINT16,
    pub ChapSecretOffset: UINT16,
    pub ReverseChapNameLength: UINT16,
    pub ReverseChapNameOffset: UINT16,
    pub ReverseChapSecretLength: UINT16,
    pub ReverseChapSecretOffset: UINT16,
}
#[doc = " IORT - IO Remapping Table"]
#[doc = ""]
#[doc = " Conforms to \"IO Remapping Table System Software on ARM Platforms\","]
#[doc = " Document number: ARM DEN 0049D, March 2018"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_iort {
    pub Header: ACPI_TABLE_HEADER,
    pub NodeCount: UINT32,
    pub NodeOffset: UINT32,
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_node {
    pub Type: UINT8,
    pub Length: UINT16,
    pub Revision: UINT8,
    pub Reserved: UINT32,
    pub MappingCount: UINT32,
    pub MappingOffset: UINT32,
    pub NodeData: [i8; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_id_mapping {
    pub InputBase: UINT32,
    pub IdCount: UINT32,
    pub OutputBase: UINT32,
    pub OutputReference: UINT32,
    pub Flags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_memory_access {
    pub CacheCoherency: UINT32,
    pub Hints: UINT8,
    pub Reserved: UINT16,
    pub MemoryFlags: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_its_group {
    pub ItsCount: UINT32,
    pub Identifiers: [UINT32; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_named_component {
    pub NodeFlags: UINT32,
    pub MemoryProperties: UINT64,
    pub MemoryAddressLimit: UINT8,
    pub DeviceName: [i8; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_root_complex {
    pub MemoryProperties: UINT64,
    pub AtsAttribute: UINT32,
    pub PciSegmentNumber: UINT32,
    pub MemoryAddressLimit: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_smmu {
    pub BaseAddress: UINT64,
    pub Span: UINT64,
    pub Model: UINT32,
    pub Flags: UINT32,
    pub GlobalInterruptOffset: UINT32,
    pub ContextInterruptCount: UINT32,
    pub ContextInterruptOffset: UINT32,
    pub PmuInterruptCount: UINT32,
    pub PmuInterruptOffset: UINT32,
    pub Interrupts: [UINT64; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_smmu_gsi {
    pub NSgIrpt: UINT32,
    pub NSgIrptFlags: UINT32,
    pub NSgCfgIrpt: UINT32,
    pub NSgCfgIrptFlags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_smmu_v3 {
    pub BaseAddress: UINT64,
    pub Flags: UINT32,
    pub Reserved: UINT32,
    pub VatosAddress: UINT64,
    pub Model: UINT32,
    pub EventGsiv: UINT32,
    pub PriGsiv: UINT32,
    pub GerrGsiv: UINT32,
    pub SyncGsiv: UINT32,
    pub Pxm: UINT32,
    pub IdMappingIndex: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_iort_pmcg {
    pub Page0BaseAddress: UINT64,
    pub OverflowGsiv: UINT32,
    pub NodeReference: UINT32,
    pub Page1BaseAddress: UINT64,
}
#[doc = " IVRS - I/O Virtualization Reporting Structure"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"AMD I/O Virtualization Technology (IOMMU) Specification\","]
#[doc = " Revision 1.26, February 2009."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_ivrs {
    pub Header: ACPI_TABLE_HEADER,
    pub Info: UINT32,
    pub Reserved: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_header {
    pub Type: UINT8,
    pub Flags: UINT8,
    pub Length: UINT16,
    pub DeviceId: UINT16,
}
pub type ACPI_IVRS_HEADER = acpi_ivrs_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_hardware {
    pub Header: ACPI_IVRS_HEADER,
    pub CapabilityOffset: UINT16,
    pub BaseAddress: UINT64,
    pub PciSegmentGroup: UINT16,
    pub Info: UINT16,
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_de_header {
    pub Type: UINT8,
    pub Id: UINT16,
    pub DataSetting: UINT8,
}
pub type ACPI_IVRS_DE_HEADER = acpi_ivrs_de_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device4 {
    pub Header: ACPI_IVRS_DE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8a {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub Reserved1: UINT8,
    pub UsedId: UINT16,
    pub Reserved2: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8b {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub ExtendedData: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_device8c {
    pub Header: ACPI_IVRS_DE_HEADER,
    pub Handle: UINT8,
    pub UsedId: UINT16,
    pub Variety: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_ivrs_memory {
    pub Header: ACPI_IVRS_HEADER,
    pub AuxData: UINT16,
    pub Reserved: UINT64,
    pub StartAddress: UINT64,
    pub MemoryLength: UINT64,
}
#[doc = " LPIT - Low Power Idle Table"]
#[doc = ""]
#[doc = " Conforms to \"ACPI Low Power Idle Table (LPIT)\" July 2014."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_lpit {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_lpit_header {
    pub Type: UINT32,
    pub Length: UINT32,
    pub UniqueId: UINT16,
    pub Reserved: UINT16,
    pub Flags: UINT32,
}
pub type ACPI_LPIT_HEADER = acpi_lpit_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_lpit_native {
    pub Header: ACPI_LPIT_HEADER,
    pub EntryTrigger: ACPI_GENERIC_ADDRESS,
    pub Residency: UINT32,
    pub Latency: UINT32,
    pub ResidencyCounter: ACPI_GENERIC_ADDRESS,
    pub CounterFrequency: UINT64,
}
#[doc = " MADT - Multiple APIC Description Table"]
#[doc = "        Version 3"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_madt {
    pub Header: ACPI_TABLE_HEADER,
    pub Address: UINT32,
    pub Flags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub Id: UINT8,
    pub LapicFlags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_io_apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Reserved: UINT8,
    pub Address: UINT32,
    pub GlobalIrqBase: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_interrupt_override {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Bus: UINT8,
    pub SourceIrq: UINT8,
    pub GlobalIrq: UINT32,
    pub IntiFlags: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_nmi_source {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub GlobalIrq: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic_nmi {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub IntiFlags: UINT16,
    pub Lint: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_apic_override {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_io_sapic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Id: UINT8,
    pub Reserved: UINT8,
    pub GlobalIrqBase: UINT32,
    pub Address: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_sapic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProcessorId: UINT8,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub LapicFlags: UINT32,
    pub Uid: UINT32,
    pub UidString: [i8; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_interrupt_source {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub Type: UINT8,
    pub Id: UINT8,
    pub Eid: UINT8,
    pub IoSapicVector: UINT8,
    pub GlobalIrq: UINT32,
    pub Flags: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_x2apic {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub LocalApicId: UINT32,
    pub LapicFlags: UINT32,
    pub Uid: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_local_x2apic_nmi {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub IntiFlags: UINT16,
    pub Uid: UINT32,
    pub Lint: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_interrupt {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub CpuInterfaceNumber: UINT32,
    pub Uid: UINT32,
    pub Flags: UINT32,
    pub ParkingVersion: UINT32,
    pub PerformanceInterrupt: UINT32,
    pub ParkedAddress: UINT64,
    pub BaseAddress: UINT64,
    pub GicvBaseAddress: UINT64,
    pub GichBaseAddress: UINT64,
    pub VgicInterrupt: UINT32,
    pub GicrBaseAddress: UINT64,
    pub ArmMpidr: UINT64,
    pub EfficiencyClass: UINT8,
    pub Reserved2: [UINT8; 1usize],
    pub SpeInterrupt: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_distributor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub GicId: UINT32,
    pub BaseAddress: UINT64,
    pub GlobalIrqBase: UINT32,
    pub Version: UINT8,
    pub Reserved2: [UINT8; 3usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_msi_frame {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub MsiFrameId: UINT32,
    pub BaseAddress: UINT64,
    pub Flags: UINT32,
    pub SpiCount: UINT16,
    pub SpiBase: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_redistributor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_madt_generic_translator {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub TranslationId: UINT32,
    pub BaseAddress: UINT64,
    pub Reserved2: UINT32,
}
#[doc = " MCFG - PCI Memory Mapped Configuration table and subtable"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"PCI Firmware Specification\", Revision 3.0, June 20, 2005"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mcfg {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: [UINT8; 8usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mcfg_allocation {
    pub Address: UINT64,
    pub PciSegment: UINT16,
    pub StartBusNumber: UINT8,
    pub EndBusNumber: UINT8,
    pub Reserved: UINT32,
}
#[doc = " MCHI - Management Controller Host Interface Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Management Component Transport Protocol (MCTP) Host"]
#[doc = " Interface Specification\", Revision 1.0.0a, October 13, 2009"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mchi {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Protocol: UINT8,
    pub ProtocolData: UINT64,
    pub InterruptType: UINT8,
    pub Gpe: UINT8,
    pub PciDeviceFlag: UINT8,
    pub GlobalInterrupt: UINT32,
    pub ControlRegister: ACPI_GENERIC_ADDRESS,
    pub PciSegment: UINT8,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mpst {
    pub Header: ACPI_TABLE_HEADER,
    pub ChannelId: UINT8,
    pub Reserved1: [UINT8; 3usize],
    pub PowerNodeCount: UINT16,
    pub Reserved2: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_channel {
    pub ChannelId: UINT8,
    pub Reserved1: [UINT8; 3usize],
    pub PowerNodeCount: UINT16,
    pub Reserved2: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_node {
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub NodeId: UINT16,
    pub Length: UINT32,
    pub RangeAddress: UINT64,
    pub RangeLength: UINT64,
    pub NumPowerStates: UINT32,
    pub NumPhysicalComponents: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_state {
    pub PowerState: UINT8,
    pub InfoIndex: UINT8,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_component {
    pub ComponentId: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_data_hdr {
    pub CharacteristicsCount: UINT16,
    pub Reserved: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_power_data {
    pub StructureId: UINT8,
    pub Flags: UINT8,
    pub Reserved1: UINT16,
    pub AveragePower: UINT32,
    pub PowerSaving: UINT32,
    pub ExitLatency: UINT64,
    pub Reserved2: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mpst_shared {
    pub Signature: UINT32,
    pub PccCommand: UINT16,
    pub PccStatus: UINT16,
    pub CommandRegister: UINT32,
    pub StatusRegister: UINT32,
    pub PowerStateId: UINT32,
    pub PowerNodeId: UINT32,
    pub EnergyConsumed: UINT64,
    pub AveragePower: UINT64,
}
#[doc = " MSCT - Maximum System Characteristics Table (ACPI 4.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_msct {
    pub Header: ACPI_TABLE_HEADER,
    pub ProximityOffset: UINT32,
    pub MaxProximityDomains: UINT32,
    pub MaxClockDomains: UINT32,
    pub MaxAddress: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_msct_proximity {
    pub Revision: UINT8,
    pub Length: UINT8,
    pub RangeStart: UINT32,
    pub RangeEnd: UINT32,
    pub ProcessorCapacity: UINT32,
    pub MemoryCapacity: UINT64,
}
#[doc = " MSDM - Microsoft Data Management table"]
#[doc = ""]
#[doc = " Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\","]
#[doc = " November 29, 2011. Copyright 2011 Microsoft"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_msdm {
    pub Header: ACPI_TABLE_HEADER,
}
#[doc = " MTMR - MID Timer Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Simple Firmware Interface Specification\","]
#[doc = " Draft 0.8.2, Oct 19, 2010"]
#[doc = " NOTE: The ACPI MTMR is equivalent to the SFI MTMR table."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_mtmr {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_mtmr_entry {
    pub PhysicalAddress: ACPI_GENERIC_ADDRESS,
    pub Frequency: UINT32,
    pub Irq: UINT32,
}
#[doc = " NFIT - NVDIMM Interface Table (ACPI 6.0+)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_nfit {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_header {
    pub Type: UINT16,
    pub Length: UINT16,
}
pub type ACPI_NFIT_HEADER = acpi_nfit_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_system_address {
    pub Header: ACPI_NFIT_HEADER,
    pub RangeIndex: UINT16,
    pub Flags: UINT16,
    pub Reserved: UINT32,
    pub ProximityDomain: UINT32,
    pub RangeGuid: [UINT8; 16usize],
    pub Address: UINT64,
    pub Length: UINT64,
    pub MemoryMapping: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_memory_map {
    pub Header: ACPI_NFIT_HEADER,
    pub DeviceHandle: UINT32,
    pub PhysicalId: UINT16,
    pub RegionId: UINT16,
    pub RangeIndex: UINT16,
    pub RegionIndex: UINT16,
    pub RegionSize: UINT64,
    pub RegionOffset: UINT64,
    pub Address: UINT64,
    pub InterleaveIndex: UINT16,
    pub InterleaveWays: UINT16,
    pub Flags: UINT16,
    pub Reserved: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_interleave {
    pub Header: ACPI_NFIT_HEADER,
    pub InterleaveIndex: UINT16,
    pub Reserved: UINT16,
    pub LineCount: UINT32,
    pub LineSize: UINT32,
    pub LineOffset: [UINT32; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_smbios {
    pub Header: ACPI_NFIT_HEADER,
    pub Reserved: UINT32,
    pub Data: [UINT8; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_control_region {
    pub Header: ACPI_NFIT_HEADER,
    pub RegionIndex: UINT16,
    pub VendorId: UINT16,
    pub DeviceId: UINT16,
    pub RevisionId: UINT16,
    pub SubsystemVendorId: UINT16,
    pub SubsystemDeviceId: UINT16,
    pub SubsystemRevisionId: UINT16,
    pub ValidFields: UINT8,
    pub ManufacturingLocation: UINT8,
    pub ManufacturingDate: UINT16,
    pub Reserved: [UINT8; 2usize],
    pub SerialNumber: UINT32,
    pub Code: UINT16,
    pub Windows: UINT16,
    pub WindowSize: UINT64,
    pub CommandOffset: UINT64,
    pub CommandSize: UINT64,
    pub StatusOffset: UINT64,
    pub StatusSize: UINT64,
    pub Flags: UINT16,
    pub Reserved1: [UINT8; 6usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_data_region {
    pub Header: ACPI_NFIT_HEADER,
    pub RegionIndex: UINT16,
    pub Windows: UINT16,
    pub Offset: UINT64,
    pub Size: UINT64,
    pub Capacity: UINT64,
    pub StartAddress: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_flush_address {
    pub Header: ACPI_NFIT_HEADER,
    pub DeviceHandle: UINT32,
    pub HintCount: UINT16,
    pub Reserved: [UINT8; 6usize],
    pub HintAddress: [UINT64; 1usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_nfit_capabilities {
    pub Header: ACPI_NFIT_HEADER,
    pub HighestCapability: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub Capabilities: UINT32,
    pub Reserved2: UINT32,
}
#[doc = " PCCT - Platform Communications Channel Table (ACPI 5.0)"]
#[doc = "        Version 2 (ACPI 6.2)"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pcct {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT32,
    pub Reserved: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_subspace {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: [UINT8; 6usize],
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_hw_reduced {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_hw_reduced_type2 {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT16,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckWriteMask: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_master {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT32,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckSetMask: UINT64,
    pub Reserved2: UINT64,
    pub CmdCompleteRegister: ACPI_GENERIC_ADDRESS,
    pub CmdCompleteMask: UINT64,
    pub CmdUpdateRegister: ACPI_GENERIC_ADDRESS,
    pub CmdUpdatePreserveMask: UINT64,
    pub CmdUpdateSetMask: UINT64,
    pub ErrorStatusRegister: ACPI_GENERIC_ADDRESS,
    pub ErrorStatusMask: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_slave {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub PlatformInterrupt: UINT32,
    pub Flags: UINT8,
    pub Reserved1: UINT8,
    pub BaseAddress: UINT64,
    pub Length: UINT32,
    pub DoorbellRegister: ACPI_GENERIC_ADDRESS,
    pub PreserveMask: UINT64,
    pub WriteMask: UINT64,
    pub Latency: UINT32,
    pub MaxAccessRate: UINT32,
    pub MinTurnaroundTime: UINT32,
    pub PlatformAckRegister: ACPI_GENERIC_ADDRESS,
    pub AckPreserveMask: UINT64,
    pub AckSetMask: UINT64,
    pub Reserved2: UINT64,
    pub CmdCompleteRegister: ACPI_GENERIC_ADDRESS,
    pub CmdCompleteMask: UINT64,
    pub CmdUpdateRegister: ACPI_GENERIC_ADDRESS,
    pub CmdUpdatePreserveMask: UINT64,
    pub CmdUpdateSetMask: UINT64,
    pub ErrorStatusRegister: ACPI_GENERIC_ADDRESS,
    pub ErrorStatusMask: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_shared_memory {
    pub Signature: UINT32,
    pub Command: UINT16,
    pub Status: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pcct_ext_pcc_shared_memory {
    pub Signature: UINT32,
    pub Flags: UINT32,
    pub Length: UINT32,
    pub Command: UINT32,
}
#[doc = " PDTT - Platform Debug Trigger Table (ACPI 6.2)"]
#[doc = "        Version 0"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pdtt {
    pub Header: ACPI_TABLE_HEADER,
    pub TriggerCount: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub ArrayOffset: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pdtt_channel {
    pub SubchannelId: UINT8,
    pub Flags: UINT8,
}
#[doc = " PMTT - Platform Memory Topology Table (ACPI 5.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pmtt {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_header {
    pub Type: UINT8,
    pub Reserved1: UINT8,
    pub Length: UINT16,
    pub Flags: UINT16,
    pub Reserved2: UINT16,
}
pub type ACPI_PMTT_HEADER = acpi_pmtt_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_socket {
    pub Header: ACPI_PMTT_HEADER,
    pub SocketId: UINT16,
    pub Reserved: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_controller {
    pub Header: ACPI_PMTT_HEADER,
    pub ReadLatency: UINT32,
    pub WriteLatency: UINT32,
    pub ReadBandwidth: UINT32,
    pub WriteBandwidth: UINT32,
    pub AccessWidth: UINT16,
    pub Alignment: UINT16,
    pub Reserved: UINT16,
    pub DomainCount: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_domain {
    pub ProximityDomain: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pmtt_physical_component {
    pub Header: ACPI_PMTT_HEADER,
    pub ComponentId: UINT16,
    pub Reserved: UINT16,
    pub MemorySize: UINT32,
    pub BiosHandle: UINT32,
}
#[doc = " PPTT - Processor Properties Topology Table (ACPI 6.2)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_pptt {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_processor {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Flags: UINT32,
    pub Parent: UINT32,
    pub AcpiProcessorId: UINT32,
    pub NumberOfPrivResources: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_cache {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub Flags: UINT32,
    pub NextLevelOfCache: UINT32,
    pub Size: UINT32,
    pub NumberOfSets: UINT32,
    pub Associativity: UINT8,
    pub Attributes: UINT8,
    pub LineSize: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pptt_id {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub VendorId: UINT32,
    pub Level1Id: UINT64,
    pub Level2Id: UINT64,
    pub MajorRev: UINT16,
    pub MinorRev: UINT16,
    pub SpinRev: UINT16,
}
#[doc = " RASF - RAS Feature Table (ACPI 5.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_rasf {
    pub Header: ACPI_TABLE_HEADER,
    pub ChannelId: [UINT8; 12usize],
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_shared_memory {
    pub Signature: UINT32,
    pub Command: UINT16,
    pub Status: UINT16,
    pub Version: UINT16,
    pub Capabilities: [UINT8; 16usize],
    pub SetCapabilities: [UINT8; 16usize],
    pub NumParameterBlocks: UINT16,
    pub SetCapabilitiesStatus: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_parameter_block {
    pub Type: UINT16,
    pub Version: UINT16,
    pub Length: UINT16,
}
pub type ACPI_RASF_PARAMETER_BLOCK = acpi_rasf_parameter_block;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_rasf_patrol_scrub_parameter {
    pub Header: ACPI_RASF_PARAMETER_BLOCK,
    pub PatrolScrubCommand: UINT16,
    pub RequestedAddressRange: [UINT64; 2usize],
    pub ActualAddressRange: [UINT64; 2usize],
    pub Flags: UINT16,
    pub RequestedSpeed: UINT8,
}
#[doc = " SBST - Smart Battery Specification Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sbst {
    pub Header: ACPI_TABLE_HEADER,
    pub WarningLevel: UINT32,
    pub LowLevel: UINT32,
    pub CriticalLevel: UINT32,
}
#[doc = " SDEI - Software Delegated Exception Interface Descriptor Table"]
#[doc = ""]
#[doc = " Conforms to \"Software Delegated Exception Interface (SDEI)\" ARM DEN0054A,"]
#[doc = " May 8th, 2017. Copyright 2017 ARM Ltd."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sdei {
    pub Header: ACPI_TABLE_HEADER,
}
#[doc = " SDEV - Secure Devices Table (ACPI 6.2)"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_sdev {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_header {
    pub Type: UINT8,
    pub Flags: UINT8,
    pub Length: UINT16,
}
pub type ACPI_SDEV_HEADER = acpi_sdev_header;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_namespace {
    pub Header: ACPI_SDEV_HEADER,
    pub DeviceIdOffset: UINT16,
    pub DeviceIdLength: UINT16,
    pub VendorDataOffset: UINT16,
    pub VendorDataLength: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_pcie {
    pub Header: ACPI_SDEV_HEADER,
    pub Segment: UINT16,
    pub StartBus: UINT16,
    pub PathOffset: UINT16,
    pub PathLength: UINT16,
    pub VendorDataOffset: UINT16,
    pub VendorDataLength: UINT16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_sdev_pcie_path {
    pub Device: UINT8,
    pub Function: UINT8,
}
#[doc = " SLIC - Software Licensing Description Table"]
#[doc = ""]
#[doc = " Conforms to \"Microsoft Software Licensing Tables (SLIC and MSDM)\","]
#[doc = " November 29, 2011. Copyright 2011 Microsoft"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_slic {
    pub Header: ACPI_TABLE_HEADER,
}
#[doc = " SLIT - System Locality Distance Information Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_slit {
    pub Header: ACPI_TABLE_HEADER,
    pub LocalityCount: UINT64,
    pub Entry: [UINT8; 1usize],
}
#[doc = " SPCR - Serial Port Console Redirection table"]
#[doc = "        Version 2"]
#[doc = ""]
#[doc = " Conforms to \"Serial Port Console Redirection Table\","]
#[doc = " Version 1.03, August 10, 2015"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_spcr {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub SerialPort: ACPI_GENERIC_ADDRESS,
    pub InterruptType: UINT8,
    pub PcInterrupt: UINT8,
    pub Interrupt: UINT32,
    pub BaudRate: UINT8,
    pub Parity: UINT8,
    pub StopBits: UINT8,
    pub FlowControl: UINT8,
    pub TerminalType: UINT8,
    pub Reserved1: UINT8,
    pub PciDeviceId: UINT16,
    pub PciVendorId: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub PciFlags: UINT32,
    pub PciSegment: UINT8,
    pub Reserved2: UINT32,
}
#[doc = " SPMI - Server Platform Management Interface table"]
#[doc = "        Version 5"]
#[doc = ""]
#[doc = " Conforms to \"Intelligent Platform Management Interface Specification"]
#[doc = " Second Generation v2.0\", Document Revision 1.0, February 12, 2004 with"]
#[doc = " June 12, 2009 markup."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_spmi {
    pub Header: ACPI_TABLE_HEADER,
    pub InterfaceType: UINT8,
    pub Reserved: UINT8,
    pub SpecRevision: UINT16,
    pub InterruptType: UINT8,
    pub GpeNumber: UINT8,
    pub Reserved1: UINT8,
    pub PciDeviceFlag: UINT8,
    pub Interrupt: UINT32,
    pub IpmiRegister: ACPI_GENERIC_ADDRESS,
    pub PciSegment: UINT8,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub Reserved2: UINT8,
}
#[doc = " SRAT - System Resource Affinity Table"]
#[doc = "        Version 3"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_srat {
    pub Header: ACPI_TABLE_HEADER,
    pub TableRevision: UINT32,
    pub Reserved: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_cpu_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomainLo: UINT8,
    pub ApicId: UINT8,
    pub Flags: UINT32,
    pub LocalSapicEid: UINT8,
    pub ProximityDomainHi: [UINT8; 3usize],
    pub ClockDomain: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_mem_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub Reserved: UINT16,
    pub BaseAddress: UINT64,
    pub Length: UINT64,
    pub Reserved1: UINT32,
    pub Flags: UINT32,
    pub Reserved2: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_x2apic_cpu_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT16,
    pub ProximityDomain: UINT32,
    pub ApicId: UINT32,
    pub Flags: UINT32,
    pub ClockDomain: UINT32,
    pub Reserved2: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_gicc_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub AcpiProcessorUid: UINT32,
    pub Flags: UINT32,
    pub ClockDomain: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_gic_its_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub ProximityDomain: UINT32,
    pub Reserved: UINT16,
    pub ItsId: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_srat_generic_affinity {
    pub Header: ACPI_SUBTABLE_HEADER,
    pub Reserved: UINT8,
    pub DeviceHandleType: UINT8,
    pub ProximityDomain: UINT32,
    pub DeviceHandle: [UINT8; 16usize],
    pub Flags: UINT32,
    pub Reserved1: UINT32,
}
#[doc = " STAO - Status Override Table (_STA override) - ACPI 6.0"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"ACPI Specification for Status Override Table\""]
#[doc = " 6 January 2015"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_stao {
    pub Header: ACPI_TABLE_HEADER,
    pub IgnoreUart: UINT8,
}
#[doc = " TCPA - Trusted Computing Platform Alliance table"]
#[doc = "        Version 2"]
#[doc = ""]
#[doc = " TCG Hardware Interface Table for TPM 1.2 Clients and Servers"]
#[doc = ""]
#[doc = " Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\","]
#[doc = " Version 1.2, Revision 8"]
#[doc = " February 27, 2017"]
#[doc = ""]
#[doc = " NOTE: There are two versions of the table with the same signature --"]
#[doc = " the client version and the server version. The common PlatformClass"]
#[doc = " field is used to differentiate the two types of tables."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_hdr {
    pub Header: ACPI_TABLE_HEADER,
    pub PlatformClass: UINT16,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_client {
    pub MinimumLogLength: UINT32,
    pub LogAddress: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tcpa_server {
    pub Reserved: UINT16,
    pub MinimumLogLength: UINT64,
    pub LogAddress: UINT64,
    pub SpecRevision: UINT16,
    pub DeviceFlags: UINT8,
    pub InterruptFlags: UINT8,
    pub GpeNumber: UINT8,
    pub Reserved2: [UINT8; 3usize],
    pub GlobalInterrupt: UINT32,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub Reserved3: UINT32,
    pub ConfigAddress: ACPI_GENERIC_ADDRESS,
    pub Group: UINT8,
    pub Bus: UINT8,
    pub Device: UINT8,
    pub Function: UINT8,
}
#[doc = " TPM2 - Trusted Platform Module (TPM) 2.0 Hardware Interface Table"]
#[doc = "        Version 4"]
#[doc = ""]
#[doc = " TCG Hardware Interface Table for TPM 2.0 Clients and Servers"]
#[doc = ""]
#[doc = " Conforms to \"TCG ACPI Specification, Family 1.2 and 2.0\","]
#[doc = " Version 1.2, Revision 8"]
#[doc = " February 27, 2017"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tpm23 {
    pub Header: ACPI_TABLE_HEADER,
    pub Reserved: UINT32,
    pub ControlAddress: UINT64,
    pub StartMethod: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tmp23_trailer {
    pub Reserved: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_tpm2 {
    pub Header: ACPI_TABLE_HEADER,
    pub PlatformClass: UINT16,
    pub Reserved: UINT16,
    pub ControlAddress: UINT64,
    pub StartMethod: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tpm2_trailer {
    pub MethodParameters: [UINT8; 12usize],
    pub MinimumLogLength: UINT32,
    pub LogAddress: UINT64,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_tpm2_arm_smc {
    pub GlobalInterrupt: UINT32,
    pub InterruptFlags: UINT8,
    pub OperationFlags: UINT8,
    pub Reserved: UINT16,
    pub FunctionId: UINT32,
}
#[doc = " UEFI - UEFI Boot optimization Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Unified Extensible Firmware Interface Specification\","]
#[doc = " Version 2.3, May 8, 2009"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_uefi {
    pub Header: ACPI_TABLE_HEADER,
    pub Identifier: [UINT8; 16usize],
    pub DataOffset: UINT16,
}
#[doc = " VRTC - Virtual Real Time Clock Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Simple Firmware Interface Specification\","]
#[doc = " Draft 0.8.2, Oct 19, 2010"]
#[doc = " NOTE: The ACPI VRTC is equivalent to The SFI MRTC table."]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_vrtc {
    pub Header: ACPI_TABLE_HEADER,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_vrtc_entry {
    pub PhysicalAddress: ACPI_GENERIC_ADDRESS,
    pub Irq: UINT32,
}
#[doc = " WAET - Windows ACPI Emulated devices Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Windows ACPI Emulated Devices Table\", version 1.0, April 6, 2009"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_waet {
    pub Header: ACPI_TABLE_HEADER,
    pub Flags: UINT32,
}
#[doc = " WDAT - Watchdog Action Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Hardware Watchdog Timers Design Specification\","]
#[doc = " Copyright 2006 Microsoft Corporation."]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wdat {
    pub Header: ACPI_TABLE_HEADER,
    pub HeaderLength: UINT32,
    pub PciSegment: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub Reserved: [UINT8; 3usize],
    pub TimerPeriod: UINT32,
    pub MaxCount: UINT32,
    pub MinCount: UINT32,
    pub Flags: UINT8,
    pub Reserved2: [UINT8; 3usize],
    pub Entries: UINT32,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_wdat_entry {
    pub Action: UINT8,
    pub Instruction: UINT8,
    pub Reserved: UINT16,
    pub RegisterRegion: ACPI_GENERIC_ADDRESS,
    pub Value: UINT32,
    pub Mask: UINT32,
}
#[doc = " WDDT - Watchdog Descriptor Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Using the Intel ICH Family Watchdog Timer (WDT)\","]
#[doc = " Version 001, September 2002"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wddt {
    pub Header: ACPI_TABLE_HEADER,
    pub SpecVersion: UINT16,
    pub TableVersion: UINT16,
    pub PciVendorId: UINT16,
    pub Address: ACPI_GENERIC_ADDRESS,
    pub MaxCount: UINT16,
    pub MinCount: UINT16,
    pub Period: UINT16,
    pub Status: UINT16,
    pub Capability: UINT16,
}
#[doc = " WDRT - Watchdog Resource Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Watchdog Timer Hardware Requirements for Windows Server 2003\","]
#[doc = " Version 1.01, August 28, 2006"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wdrt {
    pub Header: ACPI_TABLE_HEADER,
    pub ControlRegister: ACPI_GENERIC_ADDRESS,
    pub CountRegister: ACPI_GENERIC_ADDRESS,
    pub PciDeviceId: UINT16,
    pub PciVendorId: UINT16,
    pub PciBus: UINT8,
    pub PciDevice: UINT8,
    pub PciFunction: UINT8,
    pub PciSegment: UINT8,
    pub MaxCount: UINT16,
    pub Units: UINT8,
}
#[doc = " WPBT - Windows Platform Environment Table (ACPI 6.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Windows Platform Binary Table (WPBT)\" 29 November 2011"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wpbt {
    pub Header: ACPI_TABLE_HEADER,
    pub HandoffSize: UINT32,
    pub HandoffAddress: UINT64,
    pub Layout: UINT8,
    pub Type: UINT8,
    pub ArgumentsLength: UINT16,
}
#[doc = " WSMT - Windows SMM Security Migrations Table"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"Windows SMM Security Migrations Table\","]
#[doc = " Version 1.0, April 18, 2016"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_wsmt {
    pub Header: ACPI_TABLE_HEADER,
    pub ProtectionFlags: UINT32,
}
#[doc = " XENV - Xen Environment Table (ACPI 6.0)"]
#[doc = "        Version 1"]
#[doc = ""]
#[doc = " Conforms to \"ACPI Specification for Xen Environment Table\" 4 January 2015"]
#[doc = ""]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_table_xenv {
    pub Header: ACPI_TABLE_HEADER,
    pub GrantTableAddress: UINT64,
    pub GrantTableSize: UINT64,
    pub EventInterrupt: UINT32,
    pub EventFlags: UINT8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_uuid {
    pub Data: [UINT8; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_vendor_uuid {
    pub Subtype: UINT8,
    pub Data: [UINT8; 16usize],
}
pub type ACPI_VENDOR_UUID = acpi_vendor_uuid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_irq {
    pub DescriptorLength: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub Interrupts: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_IRQ = acpi_resource_irq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_dma {
    pub Type: UINT8,
    pub BusMaster: UINT8,
    pub Transfer: UINT8,
    pub ChannelCount: UINT8,
    pub Channels: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_DMA = acpi_resource_dma;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_start_dependent {
    pub DescriptorLength: UINT8,
    pub CompatibilityPriority: UINT8,
    pub PerformanceRobustness: UINT8,
}
pub type ACPI_RESOURCE_START_DEPENDENT = acpi_resource_start_dependent;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_io {
    pub IoDecode: UINT8,
    pub Alignment: UINT8,
    pub AddressLength: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
}
pub type ACPI_RESOURCE_IO = acpi_resource_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_io {
    pub Address: UINT16,
    pub AddressLength: UINT8,
}
pub type ACPI_RESOURCE_FIXED_IO = acpi_resource_fixed_io;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_dma {
    pub RequestLines: UINT16,
    pub Channels: UINT16,
    pub Width: UINT8,
}
pub type ACPI_RESOURCE_FIXED_DMA = acpi_resource_fixed_dma;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_vendor {
    pub ByteLength: UINT16,
    pub ByteData: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_VENDOR = acpi_resource_vendor;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_vendor_typed {
    pub ByteLength: UINT16,
    pub UuidSubtype: UINT8,
    pub Uuid: [UINT8; 16usize],
    pub ByteData: [UINT8; 1usize],
}
pub type ACPI_RESOURCE_VENDOR_TYPED = acpi_resource_vendor_typed;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_end_tag {
    pub Checksum: UINT8,
}
pub type ACPI_RESOURCE_END_TAG = acpi_resource_end_tag;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory24 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub Alignment: UINT16,
    pub AddressLength: UINT16,
}
pub type ACPI_RESOURCE_MEMORY24 = acpi_resource_memory24;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_memory32 {
    pub WriteProtect: UINT8,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub Alignment: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_RESOURCE_MEMORY32 = acpi_resource_memory32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_fixed_memory32 {
    pub WriteProtect: UINT8,
    pub Address: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_RESOURCE_FIXED_MEMORY32 = acpi_resource_fixed_memory32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_memory_attribute {
    pub WriteProtect: UINT8,
    pub Caching: UINT8,
    pub RangeType: UINT8,
    pub Translation: UINT8,
}
pub type ACPI_MEMORY_ATTRIBUTE = acpi_memory_attribute;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_io_attribute {
    pub RangeType: UINT8,
    pub Translation: UINT8,
    pub TranslationType: UINT8,
    pub Reserved1: UINT8,
}
pub type ACPI_IO_ATTRIBUTE = acpi_io_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_resource_attribute {
    pub Mem: ACPI_MEMORY_ATTRIBUTE,
    pub Io: ACPI_IO_ATTRIBUTE,
    pub TypeSpecific: UINT8,
    _bindgen_union_align: [u8; 4usize],
}
pub type ACPI_RESOURCE_ATTRIBUTE = acpi_resource_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_label {
    pub StringLength: UINT16,
    pub StringPtr: *mut i8,
}
pub type ACPI_RESOURCE_LABEL = acpi_resource_label;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_source {
    pub Index: UINT8,
    pub StringLength: UINT16,
    pub StringPtr: *mut i8,
}
pub type ACPI_RESOURCE_SOURCE = acpi_resource_source;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address16_attribute {
    pub Granularity: UINT16,
    pub Minimum: UINT16,
    pub Maximum: UINT16,
    pub TranslationOffset: UINT16,
    pub AddressLength: UINT16,
}
pub type ACPI_ADDRESS16_ATTRIBUTE = acpi_address16_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address32_attribute {
    pub Granularity: UINT32,
    pub Minimum: UINT32,
    pub Maximum: UINT32,
    pub TranslationOffset: UINT32,
    pub AddressLength: UINT32,
}
pub type ACPI_ADDRESS32_ATTRIBUTE = acpi_address32_attribute;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_address64_attribute {
    pub Granularity: UINT64,
    pub Minimum: UINT64,
    pub Maximum: UINT64,
    pub TranslationOffset: UINT64,
    pub AddressLength: UINT64,
}
pub type ACPI_ADDRESS64_ATTRIBUTE = acpi_address64_attribute;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
}
pub type ACPI_RESOURCE_ADDRESS = acpi_resource_address;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address16 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS16_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS16 = acpi_resource_address16;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address32 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS32_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS32 = acpi_resource_address32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct acpi_resource_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
}
pub type ACPI_RESOURCE_ADDRESS64 = acpi_resource_address64;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_resource_extended_address64 {
    pub ResourceType: UINT8,
    pub ProducerConsumer: UINT8,
    pub Decode: UINT8,
    pub MinAddressFixed: UINT8,
    pub MaxAddressFixed: UINT8,
    pub Info: ACPI_RESOURCE_ATTRIBUTE,
    pub RevisionID: UINT8,
    pub Address: ACPI_ADDRESS64_ATTRIBUTE,
    pub TypeSpecific: UINT64,
}
pub type ACPI_RESOURCE_EXTENDED_ADDRESS64 = acpi_resource_extended_address64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_extended_irq {
    pub ProducerConsumer: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub InterruptCount: UINT8,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub Interrupts: [UINT32; 1usize],
}
pub type ACPI_RESOURCE_EXTENDED_IRQ = acpi_resource_extended_irq;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_generic_register {
    pub SpaceId: UINT8,
    pub BitWidth: UINT8,
    pub BitOffset: UINT8,
    pub AccessSize: UINT8,
    pub Address: UINT64,
}
pub type ACPI_RESOURCE_GENERIC_REGISTER = acpi_resource_generic_register;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_gpio {
    pub RevisionId: UINT8,
    pub ConnectionType: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub WakeCapable: UINT8,
    pub IoRestriction: UINT8,
    pub Triggering: UINT8,
    pub Polarity: UINT8,
    pub DriveStrength: UINT16,
    pub DebounceTimeout: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_GPIO = acpi_resource_gpio;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_common_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_COMMON_SERIALBUS = acpi_resource_common_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_i2c_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub AccessMode: UINT8,
    pub SlaveAddress: UINT16,
    pub ConnectionSpeed: UINT32,
}
pub type ACPI_RESOURCE_I2C_SERIALBUS = acpi_resource_i2c_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_spi_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub WireMode: UINT8,
    pub DevicePolarity: UINT8,
    pub DataBitLength: UINT8,
    pub ClockPhase: UINT8,
    pub ClockPolarity: UINT8,
    pub DeviceSelection: UINT16,
    pub ConnectionSpeed: UINT32,
}
pub type ACPI_RESOURCE_SPI_SERIALBUS = acpi_resource_spi_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_uart_serialbus {
    pub RevisionId: UINT8,
    pub Type: UINT8,
    pub ProducerConsumer: UINT8,
    pub SlaveMode: UINT8,
    pub ConnectionSharing: UINT8,
    pub TypeRevisionId: UINT8,
    pub TypeDataLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub VendorData: *mut UINT8,
    pub Endian: UINT8,
    pub DataBits: UINT8,
    pub StopBits: UINT8,
    pub FlowControl: UINT8,
    pub Parity: UINT8,
    pub LinesEnabled: UINT8,
    pub RxFifoSize: UINT16,
    pub TxFifoSize: UINT16,
    pub DefaultBaudRate: UINT32,
}
pub type ACPI_RESOURCE_UART_SERIALBUS = acpi_resource_uart_serialbus;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_function {
    pub RevisionId: UINT8,
    pub PinConfig: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_FUNCTION = acpi_resource_pin_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub PinTable: *mut UINT16,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_CONFIG = acpi_resource_pin_config;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub PinTableLength: UINT16,
    pub VendorLength: UINT16,
    pub PinTable: *mut UINT16,
    pub ResourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP = acpi_resource_pin_group;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_function {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub FunctionNumber: UINT16,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP_FUNCTION = acpi_resource_pin_group_function;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_resource_pin_group_config {
    pub RevisionId: UINT8,
    pub ProducerConsumer: UINT8,
    pub Shareable: UINT8,
    pub PinConfigType: UINT8,
    pub PinConfigValue: UINT32,
    pub VendorLength: UINT16,
    pub ResourceSource: ACPI_RESOURCE_SOURCE,
    pub ResourceSourceLabel: ACPI_RESOURCE_LABEL,
    pub VendorData: *mut UINT8,
}
pub type ACPI_RESOURCE_PIN_GROUP_CONFIG = acpi_resource_pin_group_config;
#[repr(C)]
#[derive(Copy, Clone)]
pub union acpi_resource_data {
    pub Irq: ACPI_RESOURCE_IRQ,
    pub Dma: ACPI_RESOURCE_DMA,
    pub StartDpf: ACPI_RESOURCE_START_DEPENDENT,
    pub Io: ACPI_RESOURCE_IO,
    pub FixedIo: ACPI_RESOURCE_FIXED_IO,
    pub FixedDma: ACPI_RESOURCE_FIXED_DMA,
    pub Vendor: ACPI_RESOURCE_VENDOR,
    pub VendorTyped: ACPI_RESOURCE_VENDOR_TYPED,
    pub EndTag: ACPI_RESOURCE_END_TAG,
    pub Memory24: ACPI_RESOURCE_MEMORY24,
    pub Memory32: ACPI_RESOURCE_MEMORY32,
    pub FixedMemory32: ACPI_RESOURCE_FIXED_MEMORY32,
    pub Address16: ACPI_RESOURCE_ADDRESS16,
    pub Address32: ACPI_RESOURCE_ADDRESS32,
    pub Address64: ACPI_RESOURCE_ADDRESS64,
    pub ExtAddress64: ACPI_RESOURCE_EXTENDED_ADDRESS64,
    pub ExtendedIrq: ACPI_RESOURCE_EXTENDED_IRQ,
    pub GenericReg: ACPI_RESOURCE_GENERIC_REGISTER,
    pub Gpio: ACPI_RESOURCE_GPIO,
    pub I2cSerialBus: ACPI_RESOURCE_I2C_SERIALBUS,
    pub SpiSerialBus: ACPI_RESOURCE_SPI_SERIALBUS,
    pub UartSerialBus: ACPI_RESOURCE_UART_SERIALBUS,
    pub CommonSerialBus: ACPI_RESOURCE_COMMON_SERIALBUS,
    pub PinFunction: ACPI_RESOURCE_PIN_FUNCTION,
    pub PinConfig: ACPI_RESOURCE_PIN_CONFIG,
    pub PinGroup: ACPI_RESOURCE_PIN_GROUP,
    pub PinGroupFunction: ACPI_RESOURCE_PIN_GROUP_FUNCTION,
    pub PinGroupConfig: ACPI_RESOURCE_PIN_GROUP_CONFIG,
    pub Address: ACPI_RESOURCE_ADDRESS,
    _bindgen_union_align: [u8; 60usize],
}
pub type ACPI_RESOURCE_DATA = acpi_resource_data;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct acpi_resource {
    pub Type: UINT32,
    pub Length: UINT32,
    pub Data: ACPI_RESOURCE_DATA,
}
pub type ACPI_RESOURCE = acpi_resource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pci_routing_table {
    pub Length: UINT32,
    pub Pin: UINT32,
    pub Address: UINT64,
    pub SourceIndex: UINT32,
    pub Source: [i8; 4usize],
}
pub const ACPI_EXECUTE_TYPE_OSL_GLOBAL_LOCK_HANDLER: ACPI_EXECUTE_TYPE = 0;
pub const ACPI_EXECUTE_TYPE_OSL_NOTIFY_HANDLER: ACPI_EXECUTE_TYPE = 1;
pub const ACPI_EXECUTE_TYPE_OSL_GPE_HANDLER: ACPI_EXECUTE_TYPE = 2;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_MAIN_THREAD: ACPI_EXECUTE_TYPE = 3;
pub const ACPI_EXECUTE_TYPE_OSL_DEBUGGER_EXEC_THREAD: ACPI_EXECUTE_TYPE = 4;
pub const ACPI_EXECUTE_TYPE_OSL_EC_POLL_HANDLER: ACPI_EXECUTE_TYPE = 5;
pub const ACPI_EXECUTE_TYPE_OSL_EC_BURST_HANDLER: ACPI_EXECUTE_TYPE = 6;
pub type ACPI_EXECUTE_TYPE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_signal_fatal_info {
    pub Type: UINT32,
    pub Code: UINT32,
    pub Argument: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_fde_info {
    pub Floppy0: UINT32,
    pub Floppy1: UINT32,
    pub Floppy2: UINT32,
    pub Floppy3: UINT32,
    pub Tape: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_grt_info {
    pub Year: UINT16,
    pub Month: UINT8,
    pub Day: UINT8,
    pub Hour: UINT8,
    pub Minute: UINT8,
    pub Second: UINT8,
    pub Valid: UINT8,
    pub Milliseconds: UINT16,
    pub Timezone: UINT16,
    pub Daylight: UINT8,
    pub Reserved: [UINT8; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_gtm_info {
    pub PioSpeed0: UINT32,
    pub DmaSpeed0: UINT32,
    pub PioSpeed1: UINT32,
    pub DmaSpeed1: UINT32,
    pub Flags: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct acpi_pld_info {
    pub Revision: UINT8,
    pub IgnoreColor: UINT8,
    pub Red: UINT8,
    pub Green: UINT8,
    pub Blue: UINT8,
    pub Width: UINT16,
    pub Height: UINT16,
    pub UserVisible: UINT8,
    pub Dock: UINT8,
    pub Lid: UINT8,
    pub Panel: UINT8,
    pub VerticalPosition: UINT8,
    pub HorizontalPosition: UINT8,
    pub Shape: UINT8,
    pub GroupOrientation: UINT8,
    pub GroupToken: UINT8,
    pub GroupPosition: UINT8,
    pub Bay: UINT8,
    pub Ejectable: UINT8,
    pub OspmEjectRequired: UINT8,
    pub CabinetNumber: UINT8,
    pub CardCageNumber: UINT8,
    pub Reference: UINT8,
    pub Rotation: UINT8,
    pub Order: UINT8,
    pub Reserved: UINT8,
    pub VerticalOffset: UINT16,
    pub HorizontalOffset: UINT16,
}
pub type ACPI_PLD_INFO = acpi_pld_info;
extern "C" {
    pub fn AcpiInitializeTables(
        InitialStorage: *mut ACPI_TABLE_DESC,
        InitialTableCount: UINT32,
        AllowResize: BOOLEAN,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInitializeSubsystem() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableSubsystem(Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInitializeObjects(Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiTerminate() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSubsystemStatus() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetSystemInfo(RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetStatistics(Stats: *mut ACPI_STATISTICS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFormatException(Exception: ACPI_STATUS) -> *const i8;
}
extern "C" {
    pub fn AcpiPurgeCachedObjects() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveInterface(InterfaceName: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUpdateInterfaces(Action: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiCheckAddressRange(
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Address: ACPI_PHYSICAL_ADDRESS,
        Length: ACPI_SIZE,
        Warn: BOOLEAN,
    ) -> UINT32;
}
extern "C" {
    pub fn AcpiDecodePldBuffer(
        InBuffer: *mut UINT8,
        Length: ACPI_SIZE,
        ReturnBuffer: *mut *mut ACPI_PLD_INFO,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallTable(Address: ACPI_PHYSICAL_ADDRESS, Physical: BOOLEAN) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLoadTable(Table: *mut ACPI_TABLE_HEADER, TableIdx: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUnloadTable(TableIndex: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUnloadParentTable(Object: ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLoadTables() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReallocateRootTable() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFindRootPointer(RsdpAddress: *mut ACPI_PHYSICAL_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTableHeader(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTableHeader: *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTable(
        Signature: ACPI_STRING,
        Instance: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiPutTable(Table: *mut ACPI_TABLE_HEADER);
}
extern "C" {
    pub fn AcpiGetTableByIndex(
        TableIndex: UINT32,
        OutTable: *mut *mut ACPI_TABLE_HEADER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallTableHandler(
        Handler: ACPI_TABLE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveTableHandler(Handler: ACPI_TABLE_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkNamespace(
        Type: ACPI_OBJECT_TYPE,
        StartObject: ACPI_HANDLE,
        MaxDepth: UINT32,
        DescendingCallback: ACPI_WALK_CALLBACK,
        AscendingCallback: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetDevices(
        HID: *mut i8,
        UserFunction: ACPI_WALK_CALLBACK,
        Context: *mut ::core::ffi::c_void,
        ReturnValue: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetName(
        Object: ACPI_HANDLE,
        NameType: UINT32,
        RetPathPtr: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetHandle(
        Parent: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        RetHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAttachData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDetachData(Object: ACPI_HANDLE, Handler: ACPI_OBJECT_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetData(
        Object: ACPI_HANDLE,
        Handler: ACPI_OBJECT_HANDLER,
        Data: *mut *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDebugTrace(
        Name: *const i8,
        DebugLevel: UINT32,
        DebugLayer: UINT32,
        Flags: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEvaluateObject(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ParameterObjects: *mut ACPI_OBJECT_LIST,
        ReturnObjectBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEvaluateObjectTyped(
        Object: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        ExternalParams: *mut ACPI_OBJECT_LIST,
        ReturnBuffer: *mut ACPI_BUFFER,
        ReturnType: ACPI_OBJECT_TYPE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetObjectInfo(
        Object: ACPI_HANDLE,
        ReturnBuffer: *mut *mut ACPI_DEVICE_INFO,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallMethod(Buffer: *mut UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetNextObject(
        Type: ACPI_OBJECT_TYPE,
        Parent: ACPI_HANDLE,
        Child: ACPI_HANDLE,
        OutHandle: *mut ACPI_HANDLE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetType(Object: ACPI_HANDLE, OutType: *mut ACPI_OBJECT_TYPE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetParent(Object: ACPI_HANDLE, OutHandle: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInitializationHandler(
        Handler: ACPI_INIT_HANDLER,
        Function: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallSciHandler(
        Address: ACPI_SCI_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveSciHandler(Address: ACPI_SCI_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGlobalEventHandler(
        Handler: ACPI_GBL_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveFixedEventHandler(
        AcpiEvent: UINT32,
        Handler: ACPI_EVENT_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeRawHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Type: UINT32,
        Address: ACPI_GPE_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveGpeHandler(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Address: ACPI_GPE_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveNotifyHandler(
        Device: ACPI_HANDLE,
        HandlerType: UINT32,
        Handler: ACPI_NOTIFY_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
        Setup: ACPI_ADR_SPACE_SETUP,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveAddressSpaceHandler(
        Device: ACPI_HANDLE,
        SpaceId: ACPI_ADR_SPACE_TYPE,
        Handler: ACPI_ADR_SPACE_HANDLER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallExceptionHandler(Handler: ACPI_EXCEPTION_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallInterfaceHandler(Handler: ACPI_INTERFACE_HANDLER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAcquireGlobalLock(Timeout: UINT16, Handle: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReleaseGlobalLock(Handle: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAcquireMutex(
        Handle: ACPI_HANDLE,
        Pathname: ACPI_STRING,
        Timeout: UINT16,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReleaseMutex(Handle: ACPI_HANDLE, Pathname: ACPI_STRING) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisableEvent(Event: UINT32, Flags: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiClearEvent(Event: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetEventStatus(Event: UINT32, EventStatus: *mut ACPI_EVENT_STATUS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiUpdateAllGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDisableGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiClearGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, Action: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiFinishGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiMaskGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32, IsMasked: BOOLEAN)
        -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiMarkGpeForWake(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetupGpeForWake(
        ParentDevice: ACPI_HANDLE,
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetGpeWakeMask(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        Action: UINT8,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetGpeStatus(
        GpeDevice: ACPI_HANDLE,
        GpeNumber: UINT32,
        EventStatus: *mut ACPI_EVENT_STATUS,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiDispatchGpe(GpeDevice: ACPI_HANDLE, GpeNumber: UINT32) -> UINT32;
}
extern "C" {
    pub fn AcpiDisableAllGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableAllRuntimeGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnableAllWakeupGpes() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiAnyGpeStatusSet() -> UINT32;
}
extern "C" {
    pub fn AcpiGetGpeDevice(GpeIndex: UINT32, GpeDevice: *mut ACPI_HANDLE) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiInstallGpeBlock(
        GpeDevice: ACPI_HANDLE,
        GpeBlockAddress: *mut ACPI_GENERIC_ADDRESS,
        RegisterCount: UINT32,
        InterruptNumber: UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRemoveGpeBlock(GpeDevice: ACPI_HANDLE) -> ACPI_STATUS;
}
#[doc = " ACPICA public interface prototypes"]
#[doc = ""]
pub type ACPI_WALK_RESOURCE_CALLBACK = ::core::option::Option<
    unsafe extern "C" fn(
        Resource: *mut ACPI_RESOURCE,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS,
>;
extern "C" {
    pub fn AcpiGetVendorResource(
        Device: ACPI_HANDLE,
        Name: *mut i8,
        Uuid: *mut ACPI_VENDOR_UUID,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetCurrentResources(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER)
        -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetPossibleResources(
        Device: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetEventResources(
        DeviceHandle: ACPI_HANDLE,
        RetBuffer: *mut ACPI_BUFFER,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkResourceBuffer(
        Buffer: *mut ACPI_BUFFER,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWalkResources(
        Device: ACPI_HANDLE,
        Name: *mut i8,
        UserFunction: ACPI_WALK_RESOURCE_CALLBACK,
        Context: *mut ::core::ffi::c_void,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetCurrentResources(Device: ACPI_HANDLE, InBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetIrqRoutingTable(Device: ACPI_HANDLE, RetBuffer: *mut ACPI_BUFFER) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiResourceToAddress64(
        Resource: *mut ACPI_RESOURCE,
        Out: *mut ACPI_RESOURCE_ADDRESS64,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiBufferToResource(
        AmlBuffer: *mut UINT8,
        AmlBufferLength: UINT16,
        ResourcePtr: *mut *mut ACPI_RESOURCE,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReset() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiRead(Value: *mut UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWrite(Value: UINT64, Reg: *mut ACPI_GENERIC_ADDRESS) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiReadBitRegister(RegisterId: UINT32, ReturnValue: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiWriteBitRegister(RegisterId: UINT32, Value: UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetSleepTypeData(
        SleepState: UINT8,
        Slp_TypA: *mut UINT8,
        Slp_TypB: *mut UINT8,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiEnterSleepStateS4bios() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLeaveSleepStatePrep(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiLeaveSleepState(SleepState: UINT8) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiSetFirmwareWakingVector(
        PhysicalAddress: ACPI_PHYSICAL_ADDRESS,
        PhysicalAddress64: ACPI_PHYSICAL_ADDRESS,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimerResolution(Resolution: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimer(Ticks: *mut UINT32) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiGetTimerDuration(
        StartTicks: UINT32,
        EndTicks: UINT32,
        TimeElapsed: *mut UINT32,
    ) -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiError(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiException(
        ModuleName: *const i8,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const i8,
        ...
    );
}
extern "C" {
    pub fn AcpiWarning(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiInfo(Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiBiosError(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiBiosException(
        ModuleName: *const i8,
        LineNumber: UINT32,
        Status: ACPI_STATUS,
        Format: *const i8,
        ...
    );
}
extern "C" {
    pub fn AcpiBiosWarning(ModuleName: *const i8, LineNumber: UINT32, Format: *const i8, ...);
}
extern "C" {
    pub fn AcpiInitializeDebugger() -> ACPI_STATUS;
}
extern "C" {
    pub fn AcpiTerminateDebugger();
}
extern "C" {
    pub fn AcpiRunDebugger(BatchBuffer: *mut i8);
}
extern "C" {
    pub fn AcpiSetDebuggerThreadId(ThreadId: UINT64);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: u32,
    pub fp_offset: u32,
    pub overflow_arg_area: *mut ::core::ffi::c_void,
    pub reg_save_area: *mut ::core::ffi::c_void,
}
